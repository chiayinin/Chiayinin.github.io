<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chiayin&#39;s Blog</title>
  
  
  <link href="https://chiayinin.com/atom.xml" rel="self"/>
  
  <link href="https://chiayinin.com/"/>
  <updated>2025-08-30T10:15:37.000Z</updated>
  <id>https://chiayinin.com/</id>
  
  <author>
    <name>chiayinin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端人需要了解的 CI/CD</title>
    <link href="https://chiayinin.com/2025/08/30/%E5%89%8D%E7%AB%AF%E4%BA%BA%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84-CI-CD/"/>
    <id>https://chiayinin.com/2025/08/30/%E5%89%8D%E7%AB%AF%E4%BA%BA%E9%9C%80%E8%A6%81%E4%BA%86%E8%A7%A3%E7%9A%84-CI-CD/</id>
    <published>2025-08-30T10:15:37.000Z</published>
    <updated>2025-08-30T10:15:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h1><p><img src="https://hackmd.io/_uploads/BJ-ddVe9gl.png" alt="image"></p><h1 id="什麼是-CI-x2F-CD-？"><a href="#什麼是-CI-x2F-CD-？" class="headerlink" title="什麼是 CI&#x2F;CD ？"></a>什麼是 CI&#x2F;CD ？</h1><p>協助開發者自動化軟體開發的工作流程，自動完成檔案上傳、測試機…..的工具，成功或失敗都會通知。<br>白話的說就是：「原本手工要做完的事情，改用電腦自動幫你完成。」</p><p>重點就是要簡化並自動化繁瑣的工作，尤其是大型專案、遊戲專案，這類需要頻繁修改與測試的專案，幫助開發者提高工作效率，減少錯誤，並確保程式的品質和穩定性。</p><h1 id="CI-x2F-CD-解釋"><a href="#CI-x2F-CD-解釋" class="headerlink" title="CI&#x2F;CD 解釋"></a>CI&#x2F;CD 解釋</h1><h2 id="CI-持續整合（Continuous-Integration-自動化整合）"><a href="#CI-持續整合（Continuous-Integration-自動化整合）" class="headerlink" title="CI 持續整合（Continuous Integration 自動化整合）"></a>CI 持續整合（Continuous Integration 自動化整合）</h2><p>在系統每一次變動時，能持續且自動地進行驗證，確保程式碼品質和可建置性。<br>每一次程式碼提交會觸發自動測試和驗證過程，也有助於多人協作時能最大限度地減少程式碼衝突的可能性，並主動回報錯誤。</p><p>其行為包含：</p><ul><li>程式碼提交(Commit)</li><li>自動構建(Build)</li><li>自動測試(Test)</li></ul><h2 id="CD-持續部署（Continuous-Deployment-自動化部屬）"><a href="#CD-持續部署（Continuous-Deployment-自動化部屬）" class="headerlink" title="CD 持續部署（Continuous Deployment 自動化部屬）"></a>CD 持續部署（Continuous Deployment 自動化部屬）</h2><p>程式碼在 CI 流程完成驗證後，透過自動化方式，部署到任何環境。<br>保持每次更新程式都可順暢完成，和確保服務存活。</p><p>其行為包含：</p><ul><li>自動部署到測試環境</li><li>使用者驗收測試(UAT)</li><li>部署到生產環境</li></ul><h1 id="CI-x2F-CD-Toos"><a href="#CI-x2F-CD-Toos" class="headerlink" title="CI&#x2F;CD Toos"></a>CI&#x2F;CD Toos</h1><ol><li>Jenkins: 最知名常見的開源 CI&#x2F;CD 工具，可在本地端或 Docker 安裝執行，有豐富的套件生態，自定義擴展性高。</li><li>GitHub Action: 專案放上 GitHub 才可以使用，小型專案能在免費額度(2000分鐘)內滿足基本需求。</li><li>GitLab: 使用者直接在官網上將 CI&#x2F;CD 流程建置上去。</li></ol><h1 id="CICD-實作，以-GitHub-Actions-為例"><a href="#CICD-實作，以-GitHub-Actions-為例" class="headerlink" title="CICD 實作，以 GitHub Actions 為例"></a>CICD 實作，以 GitHub Actions 為例</h1><h2 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a>執行步驟</h2><h3 id="第一步：創建-Workflow-文件"><a href="#第一步：創建-Workflow-文件" class="headerlink" title="第一步：創建 Workflow 文件"></a>第一步：創建 Workflow 文件</h3><p>新增資料夾 <code>.github/workflows</code></p><h3 id="第二步：編寫-Workflow-配置"><a href="#第二步：編寫-Workflow-配置" class="headerlink" title="第二步：編寫 Workflow 配置"></a>第二步：編寫 Workflow 配置</h3><p>新增 <code>.yaml</code> 檔</p><h3 id="第三步：推送到-GitHub"><a href="#第三步：推送到-GitHub" class="headerlink" title="第三步：推送到 GitHub"></a>第三步：推送到 GitHub</h3><p>設定好 github repository 遠端倉庫，在每一次 <code>git commit</code>、<code>git push</code> 後會直接執行 GitHub Actions。</p><h2 id="YAML-語法指令說明"><a href="#YAML-語法指令說明" class="headerlink" title="YAML 語法指令說明"></a>YAML 語法指令說明</h2><p>YAML 是一種 data serialisation 語言，可讀性高，GitHub Actions 的 workflow 以 YAML 檔案進行設定(副檔名為<code>.yml</code>或<code>.yaml</code>)。</p><h3 id="在-YAML-常用的指令："><a href="#在-YAML-常用的指令：" class="headerlink" title="在 YAML 常用的指令："></a>在 YAML 常用的指令：</h3><ul><li><p><code>name</code>: Workflow 名稱，也是在 Action 操作頁面中，工作流程清單的顯示名稱；如果沒有設定名稱，則會以<code>文件路徑 + 檔案名稱</code>命名。</p></li><li><p><code>on</code>: 必填，觸發在 workflow 的 Event 名稱，可以設定為每當有程式被推送（push）到倉庫時觸發。</p></li><li><p><code>job</code>: 定義 workflow 的任務，預設情況下是平行(並行)執行，例如: build、testing，進而設定循序執行。</p></li><li><p><code>runs-on</code>: 設定任務執行的環境，例如: ubuntu-latest、window-latest。</p></li><li><p><code>step</code>:定義了任務中要執行的步驟。step 內不一定只能執行 action，但 action要作為 step 執行。每個步驟皆在 Runner 上執行，可以存取資料區與文件系統。</p></li></ul><h3 id="撰寫範例"><a href="#撰寫範例" class="headerlink" title="撰寫範例"></a>撰寫範例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">name: Test</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [&quot;main&quot;]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    name: build</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout to Repo Directory</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">      - name: Use Node.js 18.16.0</span><br><span class="line">        uses: actions/setup-node@v2</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;18.16.0&quot;</span><br><span class="line">      - name: NPM ci and cacheing</span><br><span class="line">        uses: bahmutov/npm-install@v1</span><br><span class="line">        with:</span><br><span class="line">          useRollingCache: true</span><br></pre></td></tr></table></figure><h3 id="檢核通過畫面"><a href="#檢核通過畫面" class="headerlink" title="檢核通過畫面"></a>檢核通過畫面</h3><p><img src="https://hackmd.io/_uploads/H1JMnBlcel.png" alt="image"></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://docs.github.com/en/actions/reference/workflows-and-actions/workflow-syntax">Workflow syntax for GitHub Actions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CICD&quot;&gt;&lt;a href=&quot;#CICD&quot; class=&quot;headerlink&quot; title=&quot;CICD&quot;&gt;&lt;/a&gt;CICD&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://hackmd.io/_uploads/BJ-ddVe9gl.png&quot; alt=&quot;imag</summary>
      
    
    
    
    
    <category term="CICD" scheme="https://chiayinin.com/tags/CICD/"/>
    
  </entry>
  
  <entry>
    <title>【刷題】CodeWars-6kyu</title>
    <link href="https://chiayinin.com/2022/11/12/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-6kyu/"/>
    <id>https://chiayinin.com/2022/11/12/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-6kyu/</id>
    <published>2022-11-12T09:28:56.000Z</published>
    <updated>2022-11-12T09:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄 <a href="https://www.codewars.com/dashboard">CodeWars</a> 的刷題過程、解答、衍伸想法。<br>不定期更新唷~。</p><h2 id="6kyu"><a href="#6kyu" class="headerlink" title="6kyu"></a>6kyu</h2><h3 id="Counting-Duplicates"><a href="#Counting-Duplicates" class="headerlink" title="Counting Duplicates"></a>Counting Duplicates</h3><p>日期:20221029<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">計算字串中，有幾個重複出現的元素？</span><br><span class="line"></span><br><span class="line">EX:</span><br><span class="line">&quot;abcde&quot; -&gt; 0，沒有任何重複。</span><br><span class="line">&quot;aabbcde&quot; -&gt; 2，a 跟 b 重複，共兩個。</span><br><span class="line">&quot;aabBcde&quot; -&gt; 2，a 跟 b 重複，共兩個。大寫 B 等同於 小寫 b。</span><br><span class="line">&quot;aA11&quot; -&gt; 2，a 跟 1 重複，共兩個。</span><br><span class="line">&quot;ABBA&quot; -&gt; 2，A 跟 B 重複，共兩個。</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">duplicateCount</span> = text =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> total=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> obj = text.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(accumulator[currentValue]) &#123;</span><br><span class="line">      accumulator[currentValue] ++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      accumulator[currentValue] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">values</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span> =&gt;</span> i &gt;= <span class="number">2</span> ? total++ : total);</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大約花兩小時解題。<br>就不另外想一行解法，免得到時回看看不懂自己的邏輯。<br>也是第一次嘗試<code>reduce()</code>方法，有熟悉一點，挺高興的！<br>解出來後看大神們的答案都寫好短喔😢 ，也是有進步空間，繼續加油！</p><hr><h3 id="Count-characters-in-your-string"><a href="#Count-characters-in-your-string" class="headerlink" title="Count characters in your string"></a>Count characters in your string</h3><p>日期: 20221106<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">計算字串中同樣字的數量，</span><br><span class="line">例：&quot;aba&quot; -&gt; &#123;&#x27;a&#x27;: 2, &#x27;b&#x27;: 1&#125;，如果字串是空的則返回空物件。</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">count</span> = string =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  string.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">forEach</span>( <span class="function"><span class="params">i</span> =&gt;</span> obj[i] ? obj[i] += <span class="number">1</span> : obj[i] = <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;紀錄 &lt;a href=&quot;https://www.codewars.com/dashboard&quot;&gt;CodeWars&lt;/a&gt; 的刷題過程、解答、衍伸想法。&lt;br&gt;不定期更新唷~。&lt;/p&gt;
&lt;h2 id=&quot;6kyu&quot;&gt;&lt;a href=&quot;#6kyu&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【刷題】CodeWars-7kyu</title>
    <link href="https://chiayinin.com/2022/11/11/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-7kyu/"/>
    <id>https://chiayinin.com/2022/11/11/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-7kyu/</id>
    <published>2022-11-11T14:16:54.000Z</published>
    <updated>2022-11-11T14:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄 <a href="https://www.codewars.com/dashboard">CodeWars</a> 的刷題過程、解答、衍伸想法。<br>不定期更新唷~。</p><h2 id="7kyu"><a href="#7kyu" class="headerlink" title="7kyu"></a>7kyu</h2><h3 id="String-ends-with"><a href="#String-ends-with" class="headerlink" title="String ends with?"></a>String ends with?</h3><p>日期:20221008<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">提供兩個字串參數，第二的參數要等同於第一個參數的結尾。</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">solution(&#x27;abc&#x27;, &#x27;bc&#x27;) // returns true</span><br><span class="line">solution(&#x27;abc&#x27;, &#x27;d&#x27;) // returns false</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">solution</span> = (<span class="params">str, ending</span>) =&gt; str.<span class="title function_">endsWith</span>(ending);</span><br></pre></td></tr></table></figure><p>補充 MDN 對<code>String.prototype.endsWith()</code> 的說明: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">連結</a></p><hr><h3 id="String-ends-with-1"><a href="#String-ends-with-1" class="headerlink" title="String ends with?"></a>String ends with?</h3><p>日期:20221011<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">讓數字由大到小，做降序排列。</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我的解法:</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">descendingOrder</span> = n =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> convertN = n.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">let</span> array = convertN.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">compare</span> = (<span class="params">a, b</span>) =&gt; b - a;</span><br><span class="line">  <span class="keyword">let</span> sortArray = array.<span class="title function_">sort</span>(compare);</span><br><span class="line">  <span class="keyword">let</span> joinArray = sortArray.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> convertNum = <span class="title class_">Number</span>(joinArray);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> convertNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort()解決陣列排序與印出:</span></span><br><span class="line">n = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">compare</span> = (<span class="params">a, b</span>) =&gt; b - a;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">descendingOrder</span> = n =&gt; n.<span class="title function_">sort</span>(compare);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解出後看大神的一行解法:</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">descendingOrder</span> = n =&gt; <span class="built_in">parseInt</span>(n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>().<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><p>使用<code>sort((a, b) =&gt; b - a)</code>做降序排列，但只支援陣列。<br>所以先將數字轉字串再轉陣列，再將陣列轉字串再轉數字。</p><hr><h3 id="Cats-and-shelves-貓咪和架子"><a href="#Cats-and-shelves-貓咪和架子" class="headerlink" title="Cats and shelves - 貓咪和架子"></a>Cats and shelves - 貓咪和架子</h3><p>日期:20221011<br>題目說明(配網站的圖):</p><ul><li>架子為左右左右往上排序。</li><li>貓咪可以一次跳 3 個架子的高度，例如: 1 → 2 或 1 → 4。</li><li>但是貓咪不能直接爬頭頂上的架子，例如: 1 → 3 不行，一定要 1 → 2 → 3。</li><li>請算出不同號碼的架子(開始與結束)之間，貓咪最少要跳幾次才能成功抵達？</li></ul><p>答案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let solution = (start, finish) =&gt; &#123;</span><br><span class="line">  let  shelveNum = finish - start ;</span><br><span class="line">  return Math.floor(shelveNum/3) + (shelveNum % 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本來是想算出數字差除以三後，有餘數就加一(再跳一次)，沒有餘數則取除數。<br>但有個陷阱是貓咪不能直接跳頭頂上的架子，等於要多跳。<br>所以應該為寫出「取除數+取餘數」的算式。<br>考解題和計算能力QQ</p><hr><h3 id="Printer-Errors-影印機錯誤"><a href="#Printer-Errors-影印機錯誤" class="headerlink" title="Printer Errors 影印機錯誤"></a>Printer Errors 影印機錯誤</h3><p>日期:20221022<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">字符串只要出現不是來自 a to m.，例如aaaxbbbbyyhwawiwjjjwwm字母就會出錯。</span><br><span class="line">您必須編寫一個函數printer_error，回傳結果的分子是錯誤數，分母是字符串的長度。不要將此分數簡化為更簡單的表達式。</span><br><span class="line">該字符串的長度大於或等於 1，並且僅包含從a到 的字母z。</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">s=&quot;aaabbbbhaijjjm&quot;</span><br><span class="line">printer_error(s) =&gt; &quot;0/14&quot;</span><br><span class="line"></span><br><span class="line">s=&quot;aaaxbbbbyyhwawiwjjjwwm&quot;</span><br><span class="line">printer_error(s) =&gt; &quot;8/22&quot;</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">printerError</span> = s =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> strLength = s.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">let</span> errorLength = s.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="regexp">/^[^a-m]*$/g</span>.<span class="title function_">test</span>(x)).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;errorLength&#125;</span>/<span class="subst">$&#123;strLength&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>卡有點久。<br>主要是可以用中文說出流程，卻不知道該使用哪個程式碼表現。</p><ol><li>計算 s 的長度</li><li>用正規表達式找出不符合的字母 ← 卡在這裡</li><li>計算不符合字母的長度</li></ol><p>最後找到<code>test()</code>方法來判斷正規表達式，並用<code>filter()</code>篩選出來，耶！</p><p>解出後看一下大神的答案:</p><ol><li><code>$&#123;s.replace(/[a-m]/gi, &quot;&quot;).length&#125;/$&#123;s.length&#125;</code>，使用<code>replace()</code>替換其他符號再計算長度，不用彎彎繞繞那麼多，真的聰明！</li><li><code>$&#123;(s.match(/[^a-m]/g) || []).length&#125;/$&#123;s.length&#125;</code>，原來可以使用<code>match()</code>來找出符合正規表達式的條件！也加上<code>||</code>判斷來計算長度，也是我沒想到的。</li></ol><p>寫出自己的程式碼後，再看別人的解答也很有趣呢。<br>但不一定會照單全收，只是未來也可以用在其他情境上，讚讚。</p><hr><h3 id="Testing-1-2-3-測試-1-2-3"><a href="#Testing-1-2-3-測試-1-2-3" class="headerlink" title="Testing 1-2-3 - 測試 1-2-3"></a>Testing 1-2-3 - 測試 1-2-3</h3><p>日期:20221026<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">題目重點翻譯：</span><br><span class="line">讓列表內的值添加有序數字，並注意冒號和空格。如下：</span><br><span class="line"></span><br><span class="line">[] --&gt; []</span><br><span class="line">[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] --&gt; [&quot;1: a&quot;, &quot;2: b&quot;, &quot;3: c&quot;]</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">number</span> = array =&gt; array.<span class="title function_">map</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h4 id="解題方式"><a href="#解題方式" class="headerlink" title="解題方式"></a>解題方式</h4><p>一開始使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let number = array =&gt; array.map(v =&gt; array.indexOf(v)+1 +&quot;: &quot;+v);</span><br></pre></td></tr></table></figure><p>出現以下錯誤:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &#x27;1: &#x27;, &#x27;1: &#x27;, &#x27;1: &#x27;, &#x27;1: &#x27;, &#x27;1: &#x27; ]</span><br><span class="line">--&gt;  [ &#x27;1: &#x27;, &#x27;2: &#x27;, &#x27;3: &#x27;, &#x27;4: &#x27;, &#x27;5: &#x27; ]</span><br></pre></td></tr></table></figure><p>上網找到這位<a href="https://www.youtube.com/watch?v=lsxyIgSBGok">大神</a>的解法，才知道應該熟悉<code>array.map()</code>的語法，才能得到最佳解。</p><h4 id="map-方法"><a href="#map-方法" class="headerlink" title="map()方法:"></a><code>map()</code>方法:</h4><p>這題可以訓練 <code>array.map()</code> 的語法，<a href="https://www.runoob.com/jsref/jsref-map.html">參考資料</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(function(currentValue,index,arr), thisValue)</span><br></pre></td></tr></table></figure><ul><li>可對陣列內每一個元素加工後回傳，組合成一個新的陣列。</li><li>參數為:<ol><li><code>function</code>: 函式內的參數分別為: <code>currentValue</code>, <code>index</code>, <code>array</code>。</li><li><code>thisValue</code>: 執行 callback 時，用於 this 的值，被執行的對象會回傳給函數。</li></ol></li></ul><p><strong>補充:</strong> <code>thisValue</code><a href="https://blog.csdn.net/qq_36453396/article/details/106017250">參考資料</a>:</p><ul><li>第二行程式碼可判斷所有 currentValue 是否都大於 1，但因為index 0 為 1，沒有大於 1，所以回傳 false。</li><li>第六行程式碼可判斷所有 currentValue 是否都大於 1，[1, 2, 3] 皆大於 0，回傳 true。</li></ul><p>因此利用參數的參數進行加工，便可得到我們要的回傳值，理解過後挺方便的。</p><hr><h3 id="Filter-the-number"><a href="#Filter-the-number" class="headerlink" title="Filter the number"></a>Filter the number</h3><p>日期:20221028<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回傳字串裡的阿拉伯數字。</span><br><span class="line"></span><br><span class="line">filterString(&quot;123&quot;) // 123</span><br><span class="line">filterString(&quot;a1b2c3&quot;) // 123</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">filterString</span> = value =&gt; <span class="built_in">parseInt</span>(value.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(n)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br></pre></td></tr></table></figure><hr><h3 id="V-A-P-O-R-C-O-D-E"><a href="#V-A-P-O-R-C-O-D-E" class="headerlink" title="V A P O R C O D E"></a>V A P O R C O D E</h3><p>日期: 20221103<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">寫一個函式將代入的字串轉換為 V A P O R W A V E 句子</span><br><span class="line">V A P O R W A V E  為所有字母大寫，字母和字母中間需有兩個空格(含特殊符號)</span><br><span class="line"></span><br><span class="line">EX:</span><br><span class="line">&quot;Lets go to the movies&quot;       --&gt;  &quot;L  E  T  S  G  O  T  O  T  H  E  M  O  V  I  E  S&quot;</span><br><span class="line">&quot;Why isn&#x27;t my code working?&quot;  --&gt;  &quot;W  H  Y  I  S  N  &#x27;  T  M  Y  C  O  D  E  W  O  R  K  I  N  G  ?&quot;</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">vaporcode</span> = string =&gt; string.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">toUpperCase</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;  &#x27;</span>);</span><br></pre></td></tr></table></figure><p>土法煉鋼的解法。</p><hr><h3 id="Love-vs-friendship-愛情-vs-友情"><a href="#Love-vs-friendship-愛情-vs-友情" class="headerlink" title="Love vs friendship - 愛情 vs 友情"></a>Love vs friendship - 愛情 vs 友情</h3><p>日期: 20221103<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">讓每個英文字母都賦予一個數字，寫一個 funtion 來計算字母的加總。</span><br><span class="line"></span><br><span class="line">EX:</span><br><span class="line">l + o + v + e = 54</span><br><span class="line">f + r + i + e + n + d + s + h + i + p = 108</span><br><span class="line">wordsToMarks(&quot;family&quot;) // 66</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">wordsToMarks</span> = string =&gt; [...string].<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, currentValue</span>) =&gt;</span>total += currentValue.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)-<span class="number">96</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>透過這題，第一次知道 ASCII, charCodeAt()，也嘗試 […arr], reduce 的寫法。</p><hr><h3 id="Likes-Vs-Dislikes"><a href="#Likes-Vs-Dislikes" class="headerlink" title="Likes Vs Dislikes"></a>Likes Vs Dislikes</h3><p>日期: 20221108<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">這題在模擬 Youtube 的喜歡不喜歡按鈕，會提供一個操作的陣列，寫一個 function 來回傳最終結果到底是按下喜歡還是不喜歡</span><br><span class="line"></span><br><span class="line">思路在於如果先按 Like 在按 Dislike，會回傳後者 Dislike</span><br><span class="line">而相同狀態按兩次則取消點擊，回傳 Nothing</span><br><span class="line">所以在發現公式前可以透過遍歷去模擬點擊順序來回傳最終狀態值</span><br><span class="line"></span><br><span class="line">likeOrDislike([Dislike]) =&gt; Dislike</span><br><span class="line">likeOrDislike([Like,Like]) =&gt; Nothing</span><br><span class="line">likeOrDislike([Dislike,Like]) =&gt; Like</span><br><span class="line">likeOrDislike([Like,Dislike,Dislike]) =&gt; Nothing</span><br></pre></td></tr></table></figure><p>解題:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">likeOrDislike</span> = buttons =&gt; buttons.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc == cur ? <span class="string">&#x27;Nothing&#x27;</span> : cur, <span class="string">&#x27;Nothing&#x27;</span>);</span><br></pre></td></tr></table></figure><p>透過同學的協助解這題。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reduce((a,b))</span><br><span class="line"></span><br><span class="line">a 參數 return 上一個迴圈的判斷結果</span><br><span class="line">所以 like(a) 等於 like(b) 為 nothing</span><br><span class="line">dislike(a) 等於 dislike(b) 為 nothing</span><br><span class="line">like(a) 不等於 dislike(b) 為 dislike(b)</span><br><span class="line">dislike(a) 不等於 like(b) 為 like(b)</span><br></pre></td></tr></table></figure><hr><h3 id="Exes-and-Ohs-井字棋-OOXX"><a href="#Exes-and-Ohs-井字棋-OOXX" class="headerlink" title="Exes and Ohs-井字棋(OOXX)"></a>Exes and Ohs-井字棋(OOXX)</h3><p>日期:20221109<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在不區分大小寫的前提下,判斷 string 中 &#x27;X&#x27; 和 &#x27;O&#x27; 的數量是否相等,返回布林值</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">XO</span> = str =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;x, o&#125; = str.<span class="title function_">toLowerCase</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    acc[cur] ? acc[cur] ++ : acc[cur] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x === o ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這次學到 <code>&#123;x,o&#125;=reduce()</code> 的寫法，輕鬆獲得 x 和 o 得值。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;紀錄 &lt;a href=&quot;https://www.codewars.com/dashboard&quot;&gt;CodeWars&lt;/a&gt; 的刷題過程、解答、衍伸想法。&lt;br&gt;不定期更新唷~。&lt;/p&gt;
&lt;h2 id=&quot;7kyu&quot;&gt;&lt;a href=&quot;#7kyu&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【刷題】CodeWars-8kyu</title>
    <link href="https://chiayinin.com/2022/11/02/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-8kyu/"/>
    <id>https://chiayinin.com/2022/11/02/%E3%80%90%E5%88%B7%E9%A1%8C%E3%80%91CodeWars-8kyu/</id>
    <published>2022-11-02T08:52:59.000Z</published>
    <updated>2022-11-02T08:52:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄 <a href="https://www.codewars.com/dashboard">CodeWars</a> 的刷題過程、解答、衍伸想法。<br>不定期更新唷~。</p><h2 id="8kyu"><a href="#8kyu" class="headerlink" title="8kyu"></a>8kyu</h2><h3 id="Square-n-Sum"><a href="#Square-n-Sum" class="headerlink" title="Square(n) Sum"></a>Square(n) Sum</h3><p>日期:20221002<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complete the square sum function so that it squares each number passed into it and then sums the results together.</span><br><span class="line"></span><br><span class="line">For example, for [1, 2, 2] it should return 9 because 1^2 + 2^2 + 2^2 = 9.</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">squareSum = (array) =&gt; &#123;</span><br><span class="line">  let sum = 0;</span><br><span class="line">  array.forEach(number =&gt; &#123;</span><br><span class="line">    sum += (number * number);</span><br><span class="line">  &#125;);</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="Even-or-Odd"><a href="#Even-or-Odd" class="headerlink" title="Even or Odd"></a>Even or Odd</h3><p>日期:20221002<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Create a function that takes an integer as an argument and returns &quot;Even&quot; for even numbers or &quot;Odd&quot; for odd numbers.</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">even_or_odd = <span class="function"><span class="params">number</span> =&gt;</span>  number % <span class="number">2</span> ?  <span class="string">&quot;Odd&quot;</span> : <span class="string">&quot;Even&quot;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="Basic-Mathematical-Operations"><a href="#Basic-Mathematical-Operations" class="headerlink" title="Basic Mathematical Operations"></a>Basic Mathematical Operations</h3><p>日期:20221004<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">寫一個函式，讓以下三個參數可以輸出計算後的值。</span><br><span class="line">(&#x27;+&#x27;, 4, 7) --&gt; 11</span><br><span class="line">(&#x27;-&#x27;, 15, 18) --&gt; -3</span><br><span class="line">(&#x27;*&#x27;, 5, 5) --&gt; 25</span><br><span class="line">(&#x27;/&#x27;, 49, 7) --&gt; 7</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">basicOp</span> = (<span class="params">operation, value1, value2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span>(operation)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value1 - value2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value1 * value2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> value1 / value2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;請重新輸入。&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="Keep-Hydrated"><a href="#Keep-Hydrated" class="headerlink" title="Keep Hydrated!"></a>Keep Hydrated!</h3><p>日期:20221004<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Because Nathan knows it is important to stay hydrated, he drinks 0.5 litres of water per hour of cycling.</span><br><span class="line"></span><br><span class="line">You get given the time in hours and you need to return the number of litres Nathan will drink, rounded to the smallest value.</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">time = 3 ----&gt; litres = 1</span><br><span class="line">time = 6.7---&gt; litres = 3</span><br><span class="line">time = 11.8--&gt; litres = 5</span><br></pre></td></tr></table></figure><ul><li>這個出題挺讓人誤會的，<code>rounded to the smallest value</code>一開始以為是四捨五入，不過關。測試過後，使用<code>Math.floor()</code>或<code>Math.trunc()</code>皆可通關。</li></ul><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">litres</span> = time =&gt; <span class="title class_">Math</span>.<span class="title function_">floor</span>(time * <span class="number">0.5</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">litres</span> = time =&gt; <span class="title class_">Math</span>.<span class="title function_">trunc</span>(time * <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="Logic-Drills-Traffic-light"><a href="#Logic-Drills-Traffic-light" class="headerlink" title="Logic Drills Traffic light"></a>Logic Drills Traffic light</h3><p>日期:20221005<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">寫一個 function 可以傳入目前的燈號 green yellow red</span><br><span class="line">傳入後將輸出下一個應該顯示的燈號</span><br><span class="line">例如：  green → yellow   red → green</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if else 簡單解法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">updateLight</span> = (<span class="params">current</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(current == <span class="string">&quot;green&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(current == <span class="string">&quot;yellow&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>( current == <span class="string">&quot;red&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;green&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// indexOf 參考別人的解法</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">updateLight</span> = (<span class="params">current</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> states = [<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;red&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> nextStateIndex =(states.<span class="title function_">indexOf</span>(current) + <span class="number">1</span>) % (states.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">return</span> states[nextStateIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析:</p><ol><li>indexOf 會回傳該陣列值的 index，若沒有值則回傳 -1。</li><li>紅綠燈是依序變化，所以先找出下一個值的 index: states.indexOf(current) + 1。</li><li>因為 red 下一個 index 為 3，因此要除以整個陣列的長度後的餘數才會得到第一個 index 0: % (states.length)。</li></ol><hr><h3 id="Is-he-gonna-survive"><a href="#Is-he-gonna-survive" class="headerlink" title="Is he gonna survive?"></a>Is he gonna survive?</h3><p>日期:20221005<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">兩顆子可擊敗一條龍，英雄可否存活？true or false</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">hero</span> = (<span class="params">bullets, dragons</span>) =&gt; bullets/<span class="number">2</span> &gt;= dragons ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hero</span> = (<span class="params">bullets, dragons</span>) =&gt; bullets/<span class="number">2</span> &gt;= dragons;</span><br></pre></td></tr></table></figure><hr><h3 id="Remove-String-Spaces"><a href="#Remove-String-Spaces" class="headerlink" title="Remove String Spaces"></a>Remove String Spaces</h3><p>日期:20221006<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Simple, remove the spaces from the string, then return the resultant string.</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">noSpace</span> = x =&gt; x.<span class="title function_">replace</span>(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">noSpace</span> = x =&gt; x.<span class="title function_">replace</span>(<span class="regexp">/ /g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">noSpace</span> = x =&gt; x.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/6844904041923739656">replace() 正規表達式補充</a></p><hr><h3 id="Convert-boolean-values-to-strings-‘Yes’-or-‘No’"><a href="#Convert-boolean-values-to-strings-‘Yes’-or-‘No’" class="headerlink" title="Convert boolean values to strings ‘Yes’ or ‘No’."></a>Convert boolean values to strings ‘Yes’ or ‘No’.</h3><p>日期:20221006<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complete the method that takes a boolean value and return a &quot;Yes&quot; string for true, or a &quot;No&quot; string for false.</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">boolToWord</span> = bool =&gt; bool == <span class="literal">true</span> ? <span class="string">&#x27;Yes&#x27;</span> : <span class="string">&#x27;No&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="The-Feast-of-Many-Beasts"><a href="#The-Feast-of-Many-Beasts" class="headerlink" title="The Feast of Many Beasts"></a>The Feast of Many Beasts</h3><p>日期:20221008<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">每隻動物參加盛宴都要帶一道菜來</span><br><span class="line">不過有一條規則：菜名開頭和結尾的字母必須和動物名的開頭和結尾字母一樣</span><br><span class="line">例如：chickadee (動物名)</span><br><span class="line">     chocolate cake（菜名）</span><br><span class="line">開頭和結尾分別是c和e</span><br><span class="line"></span><br><span class="line">創建一個function feast內含兩個參數，分別是動物名（beast）和菜名(dish)，function會回傳布林值</span><br><span class="line">動物名（beast）和菜名(dish)必須要是小寫而且至少兩個字母，此外，不能是數字，開頭和結尾不能是 “ -  “  和空白</span><br></pre></td></tr></table></figure><p>翻譯人:六角社群<code>hannahTW#2224</code></p><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">feast</span> = (<span class="params">beast, dish</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> beast.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)[<span class="number">0</span>] === dish.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)[<span class="number">0</span>] &amp;&amp; beast.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)[beast.<span class="property">length</span> - <span class="number">1</span>] === dish.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>)[dish.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解說:<br><code>array[array.length - 1]</code> 可以取 Array 最後一個 index 的值。</p><hr><h3 id="Reversed-Strings"><a href="#Reversed-Strings" class="headerlink" title="Reversed Strings"></a>Reversed Strings</h3><p>日期:20221011<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">反轉字串，EX:</span><br><span class="line">&#x27;world&#x27;  =&gt;  &#x27;dlrow&#x27;</span><br><span class="line">&#x27;word&#x27;   =&gt;  &#x27;drow&#x27;</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">solution</span> = str =&gt; str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>網路搜尋最常見的解法，也簡單易懂，值得注意的是<code>split()</code>和<code>join()</code>的括弧內要添增字串符號<code>&#39;&#39;</code>，不然會切分與增加失敗。</p><hr><h3 id="String-cleaning"><a href="#String-cleaning" class="headerlink" title="String cleaning"></a>String cleaning</h3><p>日期:20221011<br>題目:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">刪減字串中的數字，空格與特殊符號要保留。</span><br></pre></td></tr></table></figure><p>答案:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">stringClean</span> = s =&gt; s.<span class="title function_">replace</span>(<span class="regexp">/\d*/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>直覺想到用<code>replace()</code>，這題是考正規表達式吧XD。<br>另外分享一篇正規表達式的代碼說明與整理很清楚的文章：<a href="http://gitqwerty777.github.io/regular-expression/#:~:text=%E6%AD%A3%E8%A6%8F%E8%A1%A8%E7%A4%BA%E5%BC%8F%E7%AF%84%E4%BE%8B%201%20%E6%95%B8%E5%AD%97%E6%88%96%E7%84%A1%E8%BC%B8%E5%85%A5%EF%BC%9A%20%5E%20%5B0-9%5D%2A%24%202%20m%20%E5%88%B0,%5B0-9%5D%7C%20%5B01%5D%3F%20%5B0-9%5D%20%5B0-9%5D%3F%29%29%2A%24%20...%207%20%E5%8F%AF%E4%BB%A5%E6%80%9D%E8%80%83%E4%B8%8B%E5%88%97%E5%85%A9%E9%A1%8C%EF%BC%8C%E6%98%AF%E5%90%A6%E6%9C%89%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%AF%AB%E6%B3%95%20">正規表示式簡介 | QWERTY</a></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;紀錄 &lt;a href=&quot;https://www.codewars.com/dashboard&quot;&gt;CodeWars&lt;/a&gt; 的刷題過程、解答、衍伸想法。&lt;br&gt;不定期更新唷~。&lt;/p&gt;
&lt;h2 id=&quot;8kyu&quot;&gt;&lt;a href=&quot;#8kyu&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="刷題" scheme="https://chiayinin.com/categories/%E5%88%B7%E9%A1%8C/"/>
    
    
    <category term="刷題" scheme="https://chiayinin.com/tags/%E5%88%B7%E9%A1%8C/"/>
    
    <category term="CodeWars" scheme="https://chiayinin.com/tags/CodeWars/"/>
    
  </entry>
  
  <entry>
    <title>【CSS】BEM CSS 的認識與了解</title>
    <link href="https://chiayinin.com/2022/10/31/%E3%80%90CSS%E3%80%91BEM-CSS-%E7%9A%84%E8%AA%8D%E8%AD%98%E8%88%87%E4%BA%86%E8%A7%A3/"/>
    <id>https://chiayinin.com/2022/10/31/%E3%80%90CSS%E3%80%91BEM-CSS-%E7%9A%84%E8%AA%8D%E8%AD%98%E8%88%87%E4%BA%86%E8%A7%A3/</id>
    <published>2022-10-31T12:16:35.000Z</published>
    <updated>2022-10-31T12:16:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什麼是-BEM"><a href="#什麼是-BEM" class="headerlink" title="什麼是 BEM"></a>什麼是 BEM</h2><p>BEM 是 <code>Block</code> <code>Element</code> <code>Modifier</code> 的縮寫，一種「<strong>前端命名規範</strong>」，為了讓 CSS Class 更好維護的命名方式，將用戶界面劃分為各種獨立的<strong>模塊（Block）</strong>，藉由不同組件的命名讓程式碼易懂、可重用，進而有效率地開發和維護。</p><ul><li>優點：具獨立性與複用性</li><li>缺點：命名長度過長。</li></ul><p>由Yandex 公司推出的，包括了規範以及其配套構建工具。如今提到的 BEM 主要是指其中的規範，在 BEM 最新的推廣頁中，對其的描述為：</p><blockquote><p>BEM 是一種命名方法，能夠幫助你在前端開發中實現可複用的組件和代碼共享。</p></blockquote><p>官方網址: <a href="http://getbem.com/">http://getbem.com/</a></p><h2 id="一、BEM-組成介紹"><a href="#一、BEM-組成介紹" class="headerlink" title="一、BEM 組成介紹"></a>一、BEM 組成介紹</h2><h3 id="1-Block"><a href="#1-Block" class="headerlink" title="1. Block"></a>1. Block</h3><blockquote><p><img src="https://i.imgur.com/LwiDMYv.png"><br>圖片來源：<a href="https://en.bem.info/methodology/key-concepts/">https://en.bem.info/methodology/key-concepts/</a></p></blockquote><p><strong>Block</strong> 意為網頁畫面中看到的多個不同的區塊，例如：選單、搜尋……等，其特性有：</p><ul><li>具有獨立性：可在開發中重複利用，降低程式碼的複寫率，提升開發速度。</li><li>使用彈性高：可以放在頁面上任一位置，也可以互相嵌入。</li></ul><h4 id="1-1-選擇器的特色和命名"><a href="#1-1-選擇器的特色和命名" class="headerlink" title="1-1. 選擇器的特色和命名"></a>1-1. 選擇器的特色和命名</h4><ul><li>Block name 描述他的功能、區塊的目的，而非狀態。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>, container, <span class="selector-tag">menu</span>, checkbox, <span class="selector-tag">input</span></span><br></pre></td></tr></table></figure></li><li>不會添加樣式在裡面(例如：color, margin……等)。</li><li>使用BEM的同時，不會使用 CSS 標籤選擇器和 ID 選擇器。</li><li>命名方式：為單一單字<code>block</code>或使用1個破折號來連接過長的單字<code>block-name</code>。</li></ul><h4 id="1-2-嵌入"><a href="#1-2-嵌入" class="headerlink" title="1-2. 嵌入"></a>1-2. 嵌入</h4><ul><li>Block 和 Block 之間可以彼此嵌入。</li><li>可以有任意級別的嵌入層次。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- `header` block --&gt;</span><br><span class="line">&lt;header class=&quot;header&quot;&gt;</span><br><span class="line">   &lt;!-- 嵌套 `logo` block --&gt;</span><br><span class="line">   &lt;div class=&quot;logo&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 嵌套 `search-form` block --&gt;</span><br><span class="line">   &lt;form class=&quot;search-form&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;/header&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Element"><a href="#2-Element" class="headerlink" title="2. Element"></a>2. Element</h3><blockquote><p><img src="https://i.imgur.com/TQDOGw2.png"><br>圖片來源：<a href="https://en.bem.info/methodology/key-concepts/">https://en.bem.info/methodology/key-concepts/</a></p></blockquote><p><strong>Element</strong> 是 Block 中的组成成分。Element 不能脫離 Block 單獨使用。</p><ul><li>Element 是 Block 中的组成成分。</li><li>Element 不能脫離 Block 單獨使用；但 Block 可以沒有 Element。</li></ul><h4 id="2-1-選擇器的特色和命名"><a href="#2-1-選擇器的特色和命名" class="headerlink" title="2-1. 選擇器的特色和命名"></a>2-1. 選擇器的特色和命名</h4><ul><li>Element name 如同 Block name 描述的是目的而非狀態。</li><li>命名的完整結構是<code>block-name__element-name</code>。</li><li>命名方式：使用2個下底線<code>__</code>與 Block name 名稱分隔。</li></ul><h3 id="3-Modifier"><a href="#3-Modifier" class="headerlink" title="3. Ｍodifier"></a>3. Ｍodifier</h3><blockquote><p><img src="https://i.imgur.com/yziJLXZ.png"><br>圖片來源：<a href="https://en.bem.info/methodology/key-concepts/">https://en.bem.info/methodology/key-concepts/</a></p></blockquote><p><strong>Ｍodifier name</strong> 定義了 Block 或 Element 的外觀，狀態或行為的實體。</p><ul><li>外觀：例如尺寸或主題<code>size-xl</code>, <code>theme-light</code>。</li><li>狀態：與通常狀態有什麼不同，<code>disabled</code>, <code>focused</code>。</li><li>行為：對該元素產生什麼影響，<code>right-bottom</code>。</li></ul><h4 id="3-1-選擇器的特色和命名"><a href="#3-1-選擇器的特色和命名" class="headerlink" title="3-1. 選擇器的特色和命名"></a>3-1. 選擇器的特色和命名</h4><ul><li>同一個 Block name 或 Element name 可以允許多組 Modifier name。</li><li>命名方式：2個破摺號<code>--</code>與 Block name 或  Element name 分隔<code>block-name__element--modifier</code>。</li><li>原本的命名方式為1個底線 <code>_</code>，但因為閱讀性低而改良為現在的方式。</li></ul><h2 id="二、Mix-混搭使用"><a href="#二、Mix-混搭使用" class="headerlink" title="二、Mix 混搭使用"></a>二、Mix 混搭使用</h2><p>結合多個 BEM 實體的行為和樣式，就不需要重複的程式碼，如同積木般可以有不同的排列組合，每一次重新組合都是一種創新與發現。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- `header` block --&gt;</span><br><span class="line">&lt;div class=&quot;header&quot;&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">       block:`search-form`混合在 block:`header`內的 element:`search-form`</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;div class=&quot;search-form header__search-form&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在上述的範例中，結合 block<code>search-form</code>和 Element<code>header__search-form</code>。</p><p>如此一來，便可允許我們在 Element:<code>header__search-form</code>中設置額外的形狀和定位。而 <code>search-form</code> 本身並無受到影響，因此我們還是可以在其他頁面位置使用該　Block。這就展現 BEM 的核心邏輯─「獨立性與複用性」。</p><p>在傳統命名方式中，我们經常使用套的方式為 <code>.header .search-form</code> 對局部樣式進行調整，但這樣做會改變選擇器的權重。而在 BEM 的思維，保持選擇器並列和低權重是必須遵守的準則。</p><h2 id="三、文件撰寫"><a href="#三、文件撰寫" class="headerlink" title="三、文件撰寫"></a>三、文件撰寫</h2><p>也可依 BEM 中採用的組件方式來撰寫文件。</p><ul><li>一個單獨的 Block 對應 一個單獨的目錄。</li><li>Element 目錄的名稱以2個底線 <code>__</code> 開始。</li><li>Modifier 目錄的名稱以2個破折號 <code>--</code> 開始。</li><li>Element 和 Modifier 的同樣可各自擁有不同的文件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">search-form/</span><br><span class="line"></span><br><span class="line">   __input/</span><br><span class="line">       search-form__input.css</span><br><span class="line">       search-form__input.js</span><br><span class="line"></span><br><span class="line">   __button/</span><br><span class="line">       search-form__button.css</span><br><span class="line">       search-form__button.js</span><br><span class="line"></span><br><span class="line">   --theme/</span><br><span class="line">       search-form_theme_islands.css  search-form block</span><br><span class="line">       search-form_theme_lite.css</span><br><span class="line"></span><br><span class="line">   search-form.css</span><br><span class="line">   search-form.js</span><br></pre></td></tr></table></figure><p>我們不一定要遵循 BEM 建議的文件架構，也可以使用任何可替代的架構，只要根據 BEM 原則來組織我們的文件結構，以下有另外兩種架構方式供參考：</p><ul><li>Flat：<a href="https://en.bem.info/methodology/filestructure/#flat">https://en.bem.info/methodology/filestructure/#flat</a></li><li>Flex：<a href="https://en.bem.info/methodology/filestructure/#flex">https://en.bem.info/methodology/filestructure/#flex</a></li></ul><h2 id="四、例外命名情況"><a href="#四、例外命名情況" class="headerlink" title="四、例外命名情況"></a>四、例外命名情況</h2><p>並非所有的 CSS 命名方式都要如此，當某些 CSS 設定可重複使用時，就可以獨立出來，讓該設定被重複使用。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.clearfix&#123;</span><br><span class="line">    clear:both</span><br><span class="line">&#125;</span><br><span class="line">.caps &#123;</span><br><span class="line">    text-transform: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這條 CSS 不屬於任何一個 BEM 範疇，它僅僅只是一條單獨的樣式。</p></blockquote><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p><strong>一、命名方式整理：</strong></p><ul><li>Block：block 或 block-name</li><li>__Element：__element 或 __element-name</li><li>–Ｍodifier:–modifier 或 –modifier-name</li></ul><p>整體結構：<code>block-name__element-name--modifier-name</code></p><p><strong>二、與 OOCSS 不同的是：</strong></p><ul><li>BEM 是一種命名規範。</li><li>OOCSS是CSS的設計思想。事實上 BEM 也用到了 OOCSS 的思想。</li></ul><p><strong>三、</strong><br>在許多情境下，命名方式都不是絕對的，依照不同的情況來做彈性的調正，而非墨守成規。近幾年前端框架 Boostarp, Tailwind 流行起來，大多數人較習慣 OOCSS 的命名方式，筆者也是一樣的，但還是有人在寫 BEM。</p><p>而無論是 BEM, OOCSS 的發明，都可以幫助 CSS 的開發與管理，加速了解專案的架構與增加閱讀性，如此一來便協助了工程師在開發上更有效率！</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.astralweb.com.tw/apply-bem-to-css-coding-and-maintenance-2/">BEM 規範思維 – 讓 CSS 更利於開發與維護</a><br><a href="https://w3c.hexschool.com/blog/35afa83f">淺談 BEM CSS - CSS 設計模式與架構</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什麼是-BEM&quot;&gt;&lt;a href=&quot;#什麼是-BEM&quot; class=&quot;headerlink&quot; title=&quot;什麼是 BEM&quot;&gt;&lt;/a&gt;什麼是 BEM&lt;/h2&gt;&lt;p&gt;BEM 是 &lt;code&gt;Block&lt;/code&gt; &lt;code&gt;Element&lt;/code&gt; &lt;cod</summary>
      
    
    
    
    
    <category term="CSS" scheme="https://chiayinin.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>【JavaScript】i++ 和 ++i 的差異如何理解？</title>
    <link href="https://chiayinin.com/2022/10/31/%E3%80%90JavaScript%E3%80%91i-%E5%92%8C-i-%E7%9A%84%E5%B7%AE%E7%95%B0%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%EF%BC%9F/"/>
    <id>https://chiayinin.com/2022/10/31/%E3%80%90JavaScript%E3%80%91i-%E5%92%8C-i-%E7%9A%84%E5%B7%AE%E7%95%B0%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%EF%BC%9F/</id>
    <published>2022-10-31T12:09:29.000Z</published>
    <updated>2022-10-31T12:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>在六角學院的Slack的討論大廳上看到有人詢問「i++ 和 ++i 的差異？」<br>因為提問者是程式語言的初學者，便思考著如何使用淺顯易動懂的解釋給對方聽。</p><h2 id="MDN-Web-Docs-的描述"><a href="#MDN-Web-Docs-的描述" class="headerlink" title="MDN Web Docs 的描述"></a>MDN Web Docs 的描述</h2><blockquote><p><code>++x</code>是會運算元回傳增加1後的值<br><code>x++</code>會回傳運算元加1前的值</p></blockquote><p>在某些情況下，看起來兩者最後結果都是一樣的，那他的差異性是甚麼?</p><h2 id="我的回答"><a href="#我的回答" class="headerlink" title="我的回答"></a>我的回答</h2><p>我會這樣子想。<br>採用以前學習二元一次方程式的概念來做比擬。</p><p>「<code>++</code>」就是「<code>+1</code>」的意思。<br>「<code>++x</code>」「<code>x++</code>」就是「<code>x=x+1</code>」。</p><h3 id="x-的公式拆解"><a href="#x-的公式拆解" class="headerlink" title="x++ 的公式拆解"></a><code>x++</code> 的公式拆解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y=x++</span><br><span class="line"><span class="comment">// 1.先將x的值給y，這個時候x為1，所以y的回傳值為1。</span></span><br><span class="line"><span class="comment">// 2.因為x=x+1，x的值從x+1得來，所以是1+1=2,x的回傳值為2。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 回傳 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 回傳 2</span></span><br></pre></td></tr></table></figure><h3 id="x-的公式拆解-1"><a href="#x-的公式拆解-1" class="headerlink" title="++x 的公式拆解"></a><code>++x</code> 的公式拆解</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> y=++x</span><br><span class="line"><span class="comment">// 1.先執行x=x+1，所以x=1+1等於2，x的回傳值為2。</span></span><br><span class="line"><span class="comment">// 2.再將得到的2賦予y，所以y的回傳值也為2。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y) <span class="comment">// 回傳2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// 回傳2</span></span><br></pre></td></tr></table></figure><p>因為程式邏輯和過去學習算數的概念稍有不同，將之拆解為更細部的說明，便能讓發問者聽懂囉！</p><h2 id="得到的回饋"><a href="#得到的回饋" class="headerlink" title="得到的回饋"></a>得到的回饋</h2><blockquote><p>之前也碰過類似的問題，本想放上來詢問大家，剛好就看到了這篇。你的回答很詳細，解決了我的疑惑，感恩:祈禱</p></blockquote><p>本來也是想讓自己更理解<code>i++</code>和<code>++i</code>的概念才回答的，沒想到還得到很棒的回饋，內心極為高興，這就是寫程式後所得的成就感吧！希望透過這篇文章，能讓大家以更清晰的方式理解兩者的差異喔！</p><blockquote><p>本文於 2021-06-05 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在六角學院的Slack的討論大廳上看到有人詢問「i++ 和 ++i 的差異？」&lt;br&gt;因為提問者是程式語言的初學者，便思考著如何使用淺顯易動懂的解釋給對方聽。&lt;/p&gt;
&lt;h2 id=&quot;MDN-Web-Docs-的描述&quot;&gt;&lt;a href=&quot;#MDN-Web-Docs-的描述&quot;</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://chiayinin.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 14 : Rails 中的「MVC」！</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-14-Rails-%E4%B8%AD%E7%9A%84%E3%80%8CMVC%E3%80%8D%EF%BC%81/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-14-Rails-%E4%B8%AD%E7%9A%84%E3%80%8CMVC%E3%80%8D%EF%BC%81/</id>
    <published>2022-10-30T13:56:45.000Z</published>
    <updated>2022-10-30T13:56:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/7iKamqj.jpg"></p><h2 id="MVC架構"><a href="#MVC架構" class="headerlink" title="MVC架構"></a>MVC架構</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。</p><p>Route<br><a href="https://www.youtube.com/watch?v=WOT1oqP9j7s"><img src="https://img.youtube.com/vi/WOT1oqP9j7s/0.jpg" alt="Yes"></a></p><p>Model<br><a href="https://www.youtube.com/watch?v=Vo1wqLhKRUk"><img src="https://img.youtube.com/vi/Vo1wqLhKRUk/0.jpg" alt="Yes"></a></p><p>View<br><a href="https://www.youtube.com/watch?v=53crN9eIeto"><img src="https://img.youtube.com/vi/53crN9eIeto/0.jpg" alt="Yes"></a></p><p>Controller<br><a href="https://www.youtube.com/watch?v=NeY4g3Aa18U"><img src="https://img.youtube.com/vi/NeY4g3Aa18U/0.jpg" alt="Yes"></a></p><h3 id="什麼是MVC"><a href="#什麼是MVC" class="headerlink" title="什麼是MVC"></a>什麼是MVC</h3><p>是這樣子的，Rails這個網站開發架構，引入一種軟體架構模式-MVC模式（Model–view–controller）。</p><p>其便是將軟體分為三個部分：</p><ul><li>模型(Model)</li><li>畫面(View)</li><li>控制器(Controller)</li></ul><p>為什麼要使用這套模式呢？他的優點在於：</p><ul><li>分工容易：每個部分各司其職，能讓程式的架構更加直覺，也因此更容易進行分工。</li><li>開發慣例：另一個好處是，Rails的專案皆是遵循MVC的慣例結構，因此不同程度的設計者來開發，差異不會太大。Controller通常會放在<code>app/controllers</code>目錄裡，Model也會放在<code>app/models</code>目錄裡。協同性高。</li></ul><h3 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model View Controller"></a>Model View Controller</h3><h4 id="Model-模型"><a href="#Model-模型" class="headerlink" title="Model 模型"></a>Model 模型</h4><p>用於封裝與應用程式的商業邏輯(Business logic)相關的資料以及對資料的處理方法，處理資料庫的操作，會幫我們去資料庫調資料。</p><h4 id="View-畫面"><a href="#View-畫面" class="headerlink" title="View 畫面"></a>View 畫面</h4><p>負責將資料傳遞給使用者，並處理畫面的呈現。</p><h4 id="Controller-控制器"><a href="#Controller-控制器" class="headerlink" title="Controller 控制器"></a>Controller 控制器</h4><p>負責接收從外部 (使用者介面) 傳來的訊息並作出回應，指派工作，是 Model 和 View 的中間人，起到不同層面間的組織作用。</p><h3 id="圖解MVC"><a href="#圖解MVC" class="headerlink" title="圖解MVC"></a>圖解MVC</h3><p><img src="https://i.imgur.com/TSViMYK.png"><br>圖片來源：龍哥的《為你自己學Roby on Rails》</p><ol><li>當使用者輸入網址，連到你的網站時，會送到路徑對照表(Route)。</li><li>當Route解析網址後，會將任務轉給指定的Controller。Controller根據任務需求與View互動，或是透過Model取出database裡的資料。</li><li>Model本身不是資料庫，但他可以幫我們去資料庫調資料，再回傳給Controller，並透過View顯現畫面唷。</li></ol><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>為你自己學Ruby on Rails</li></ul><blockquote><p>本文於 2020-09-21 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7iKamqj.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;MVC架構&quot;&gt;&lt;a href=&quot;#MVC架構&quot; class=&quot;headerlink&quot; title=&quot;MVC架構&quot;&gt;&lt;/a&gt;MVC架構&lt;/h2&gt;&lt;p&gt;&lt;strong</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 13 : 學習網站開發，Ruby on Rails來了！</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-13-%E5%AD%B8%E7%BF%92%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC%EF%BC%8CRuby-on-Rails%E4%BE%86%E4%BA%86%EF%BC%81/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-13-%E5%AD%B8%E7%BF%92%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC%EF%BC%8CRuby-on-Rails%E4%BE%86%E4%BA%86%EF%BC%81/</id>
    <published>2022-10-30T13:55:19.000Z</published>
    <updated>2022-10-30T13:55:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200921/20129424vkZgLIIMAm.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200921/20129424vkZgLIIMAm.jpg"><br><strong>＊英文發音</strong><br>首先來聽聽英文發音～。</p><p>Ruby<br><a href="https://www.youtube.com/watch?v=3WmkdbjR0Sg"><img src="https://img.youtube.com/vi/3WmkdbjR0Sg/0.jpg" alt="Yes"></a></p><p>Rails<br><a href="https://www.youtube.com/watch?v=eUINAA4vXBA"><img src="https://img.youtube.com/vi/eUINAA4vXBA/0.jpg" alt="Yes"></a></p><p>framework<br><a href="https://www.youtube.com/watch?v=0sYMloqvUvw"><img src="https://img.youtube.com/vi/0sYMloqvUvw/0.jpg" alt="Yes"></a></p><h2 id="什麼是Ruby-on-Rails"><a href="#什麼是Ruby-on-Rails" class="headerlink" title="什麼是Ruby on Rails?"></a>什麼是Ruby on Rails?</h2><p>常常聽到Ruby on Rails，這和Ruby的關聯性是什麼呢？</p><p>Ruby是一種程式語言，而Ruby on Rails是由Ruby這個語言寫出來的「網站開發框架」唷！</p><ul><li>發明人：David Heinemeier Hansson設計的，通常縮寫成DHH，丹麥的程式設計師。</li><li>2004年開發，2005年展示在15分鐘內使用Rails開發完一個部落格，就此名聲大噪！</li><li>其實是做某個產品中的副產品，不是特意發明的。也有人稱之為RoR，但業界都稱為Rails。</li></ul><h3 id="什麼是網頁框架-Web-framework？"><a href="#什麼是網頁框架-Web-framework？" class="headerlink" title="什麼是網頁框架 Web framework？"></a>什麼是網頁框架 Web framework？</h3><p>就好像我們寫履歷都會先找個範本來使用，框架即是別人做好的範本，在套入我們想要客製化的內容唷。</p><blockquote><p>網站開發框架&#x3D;專門為網站開發所設計的工具包</p></blockquote><h3 id="Rails-產品特色"><a href="#Rails-產品特色" class="headerlink" title="Rails 產品特色"></a>Rails 產品特色</h3><ol><li><p>Don’t Repeat Yourself，縮寫DRY。<br>也就是「不做重複的事」，是物件導向程式設計中的基本原則，程式設計師的行事準則。旨在軟體開發中，減少重複的資訊。不是Rails專有，但Rails有將概念放進去唷！</p></li><li><p>Convention Over Configuration，縮寫CoC。<br>「慣例優於設定」，可以說是按照前人規定的流程走，以減少開發中遇到的錯誤，可以暫時想成一種不成文規定的概念。</p></li></ol><h3 id="有誰在用Rails"><a href="#有誰在用Rails" class="headerlink" title="有誰在用Rails?"></a>有誰在用Rails?</h3><p>程式語言的使用率也是設計者關心的事情之一，事實上Ruby on Rails蠻多知名的網站都有使用唷！也是在日本大受歡迎的程式語言呢。</p><ol><li><p>Github</p></li><li><p>Shopify (電商開店平台)</p></li><li><p>Airbnb</p></li><li><p>Twitter (社群網站)</p></li><li><p>Sound Cloud</p></li><li><p>Heroku</p></li><li><p>Zendesk (市佔率極高的即時通訊服務)</p></li><li><p>Braintree (Paypal 收購後，其主力整合支付)</p></li></ol><h3 id="其他同性質的產品"><a href="#其他同性質的產品" class="headerlink" title="其他同性質的產品"></a>其他同性質的產品</h3><p>由於Rails已經開發15年了，其方便性、快速開發網頁的概念，受許多城市者的青睞，也因此有類似設計概念的同性質產品也跟著開發唷。</p><p>Ruby -&gt; Ruby on Rails<br>PHP -&gt;Laravel ，第一個版本是參考Rails設計的。<br>Python -&gt; Django</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>為你自己學Ruby on Rails</li><li>維基百科</li></ul><blockquote><p>本文於 2020-09-20 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200921/20129424vkZgLIIMAm.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 12 : Ruby的「註解、流程控制」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-12-Ruby%E7%9A%84%E3%80%8C%E8%A8%BB%E8%A7%A3%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-12-Ruby%E7%9A%84%E3%80%8C%E8%A8%BB%E8%A7%A3%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%8D/</id>
    <published>2022-10-30T13:53:45.000Z</published>
    <updated>2022-10-30T13:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/EThOTFM.jpg"></p><h2 id="註解-Comment"><a href="#註解-Comment" class="headerlink" title="註解 Comment"></a>註解 Comment</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=CsSUjsnckHs"><img src="https://img.youtube.com/vi/CsSUjsnckHs/0.jpg" alt="Yes"></a></p><h3 id="註解的用意？"><a href="#註解的用意？" class="headerlink" title="註解的用意？"></a>註解的用意？</h3><p>為什麼在程式碼裡面還要寫註解呢？其實啊，程式碼裡的註解是給設計者看的，它的特性為「在程式跑動時會被忽略，不被執行」。也因此，註解在程式語言中佔據相當重要的部分，其主要用途為：</p><ul><li>解釋原始碼的功能：增加程式的閱讀性與維護性。</li><li>除錯功能：讓該行程式碼不執行，尋找代碼bug的位置。</li></ul><h3 id="使用註解的方式"><a href="#使用註解的方式" class="headerlink" title="使用註解的方式"></a>使用註解的方式</h3><p>在前面的章節其實使用過許多次了，註解分為：</p><ul><li>單行註解：井字號<code>#</code>。</li><li>塊註解：多行註解<code>=begin</code>…<code>=end</code>。</li></ul><p>範例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 這是</span><br><span class="line"># 單行</span><br><span class="line"># 註解</span><br><span class="line"></span><br><span class="line">=begin</span><br><span class="line">這是</span><br><span class="line">多行</span><br><span class="line">註解</span><br><span class="line">=end</span><br></pre></td></tr></table></figure><h3 id="各種程式語言，七彩斑斕的註解"><a href="#各種程式語言，七彩斑斕的註解" class="headerlink" title="各種程式語言，七彩斑斕的註解"></a>各種程式語言，七彩斑斕的註解</h3><p>不同的程式語言的註解符號與代碼不盡相同，可透過以下圖表來了解唷！</p><p><strong>單行註解</strong><br><img src="https://i.imgur.com/7A9K78f.png"></p><p><strong>塊註解(多行註解)</strong><br><img src="https://i.imgur.com/AapLvXD.png"></p><hr><h2 id="流程控制-Flow-Controller"><a href="#流程控制-Flow-Controller" class="headerlink" title="流程控制 Flow Controller"></a>流程控制 Flow Controller</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。</p><p>Flow<br><a href="https://www.youtube.com/watch?v=VcQ7m2RzT2I"><img src="https://img.youtube.com/vi/VcQ7m2RzT2I/0.jpg" alt="Yes"></a></p><p>Controller<br><a href="https://www.youtube.com/watch?v=NeY4g3Aa18U"><img src="https://img.youtube.com/vi/NeY4g3Aa18U/0.jpg" alt="Yes"></a></p><h3 id="什麼是流程控制呢？"><a href="#什麼是流程控制呢？" class="headerlink" title="什麼是流程控制呢？"></a>什麼是流程控制呢？</h3><p>程式碼執行的順序是由上而下一行行執行的，這叫做「循序結構。但有時內容會因為判斷的情況不同而去執行不同的程式區塊，或是設定條件去執行某些重複的內容。這就是所謂的「流程控制」！</p><h4 id="邏輯判斷"><a href="#邏輯判斷" class="headerlink" title="邏輯判斷"></a>邏輯判斷</h4><p>根據邏輯運算的條件來判斷程式碼執行的流程，一判斷的結果執行不同的執行區塊，其指令有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if...end</span><br><span class="line">if...else...end</span><br><span class="line">if...eslsif...else...end # 注意不是eslseif唷！</span><br><span class="line"></span><br><span class="line">unless # 有否定意味，等同於 if not</span><br></pre></td></tr></table></figure><p>範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 作業 == <span class="string">&quot;有寫&quot;</span></span><br><span class="line">  puts <span class="string">&quot;可以看電視&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;回房間寫作業&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h5 id="＊倒裝句"><a href="#＊倒裝句" class="headerlink" title="＊倒裝句"></a>＊倒裝句</h5><p>其中也有倒裝句的寫法，可以將多行code縮寫成短短一行，就注意的是，寫程式碼最重要的就是「可讀性」，能寫出如文章般的code是最厲害的，所以不一定要使用很厲害寫法，而導致未來的自已或未來維護的人員看不懂唷。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="keyword">if</span> 作業 == <span class="string">&quot;有寫&quot;</span></span><br><span class="line">  puts <span class="string">&quot;可以看電視&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改寫倒裝句</span></span><br><span class="line">puts <span class="string">&quot;可以看電視&quot;</span> <span class="keyword">if</span> 作業 == <span class="string">&quot;有寫&quot;</span></span><br></pre></td></tr></table></figure><h5 id="＊條件運算子-三元運算子"><a href="#＊條件運算子-三元運算子" class="headerlink" title="＊條件運算子(三元運算子)"></a>＊條件運算子(三元運算子)</h5><p>在一個條件後面會跟著一個問號 (?)，如果條件是 true，在冒號(:)前的表達式會被執行，如果條件是 false，在冒號後面的表達式會被執行，這個運算子常常被用來當作 if 的簡潔寫法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 範例</span></span><br><span class="line"><span class="keyword">if</span> 作業 == <span class="string">&quot;有寫&quot;</span></span><br><span class="line">  行為 = <span class="string">&quot;可以看電視&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  行為 = <span class="string">&quot;回房間寫作業&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改寫三元運算子</span></span><br><span class="line">行為 = (作業 == <span class="string">&quot;有寫&quot;</span>)? <span class="string">&quot;可以看電視&quot;</span> : <span class="string">&quot;回房間寫作業&quot;</span></span><br></pre></td></tr></table></figure><h5 id="＊只有nil和false是假的！"><a href="#＊只有nil和false是假的！" class="headerlink" title="＊只有nil和false是假的！"></a>＊只有<code>nil</code>和<code>false</code>是假的！</h5><p><img src="https://i.imgur.com/DCZ3Xsd.jpg"></p><p>順便一說，Ruby世界的<code>nil</code>和<code>false</code>物件，所賦予的意思為「空空的」、「不存在」唷。</p><p>它可以進行其他操作，例如呼叫轉型的函式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p nil.to_s # &quot;&quot;</span><br><span class="line">p nil.to_i # 0</span><br><span class="line">p nil.to_a # []</span><br><span class="line">p nil.to_h # &#123;&#125;, Ruby 2.0 之前會出錯</span><br></pre></td></tr></table></figure><h4 id="迴圈"><a href="#迴圈" class="headerlink" title="迴圈"></a>迴圈</h4><p>撰寫程式碼的過程中，會出現需要連續執行多次的程式碼的時候，這時我們就可以使用「迴圈」，「迴圈」只會在一段程式中出現一次。</p><p>常見的迴圈可以分為二種：</p><ol><li>for…in迴圈：指定執行次數的迴圈。<br>話在前頭，其他程式語言常見的<code>for(i=0;i&lt;10;i++)</code>三個複合陳述區塊寫在圓括號中的寫法在Ruby是不存在的。</li><li>while迴圈：指定繼續執行條件或停止條件的迴圈。</li><li>times, upto, downto方法</li><li>迭代(iteration)</li></ol><hr><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>為你自己學Ruby on Rails</li><li>維基百科</li></ul><blockquote><p>本文於 2020-09-19 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EThOTFM.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;註解-Comment&quot;&gt;&lt;a href=&quot;#註解-Comment&quot; class=&quot;headerlink&quot; title=&quot;註解 Comment&quot;&gt;&lt;/a&gt;註解 Co</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 11 : Ruby的「物件導向程式設計-方法」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-11-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E6%96%B9%E6%B3%95%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-11-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E6%96%B9%E6%B3%95%E3%80%8D/</id>
    <published>2022-10-30T13:52:09.000Z</published>
    <updated>2022-10-30T13:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/pR9Wf8d.jpg"><br><a href="https://unsplash.com/photos/oAYlDfiZcJ0">圖片來源點這邊</a></p><h2 id="方法-Method"><a href="#方法-Method" class="headerlink" title="方法 Method"></a>方法 Method</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=6jpU2BO8rk4"><img src="https://img.youtube.com/vi/6jpU2BO8rk4/0.jpg" alt="Yes"></a></p><h3 id="什麼是方法呢？"><a href="#什麼是方法呢？" class="headerlink" title="什麼是方法呢？"></a>什麼是方法呢？</h3><p>在物件導向程式語言中，我們將程式法擬人化，讓設計者更方便使用程式碼，而「物件」本身含有「狀態」與「行為」，因此物件應有自己的運作方式。</p><p>當我們將訊息傳給物件，物件便會回應我們的需求，不一定需要了解物件內實際的運作方式。而這個允許我們要求物件執行的工作，就稱之為方法(method)。</p><h3 id="如何使用方法？"><a href="#如何使用方法？" class="headerlink" title="如何使用方法？"></a>如何使用方法？</h3><p><strong>＊首先：定義方法</strong></p><p>在Ruby世界，使用<code>def</code>…<code>end</code>來定義方法。<br>後面加上括號<code>()</code>可以傳入參數，若想要傳多個參數可以使用逗號<code>,</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">  puts <span class="string">&quot;So delicious <span class="subst">#&#123;food&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>＊第二：呼叫方法</strong><br>方法定義好在那邊，其實是無法使用的，若我們要執行已經定義好的方法，可以利用：</p><ol><li>點符號<code>.</code>來呼叫方法，接收的物件位於符號左側。</li><li>或是直接呼叫也可以。</li><li>定義方法時，Ruby會將方法名稱存成符號(symbol)，可使用內建<code>send</code>來呼叫。</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.點符號</span></span><br><span class="line">foo = <span class="string">&quot;abc&quot;</span></span><br><span class="line">puts foo.length -&gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line">foo = [<span class="string">&quot;abcde&quot;</span>, <span class="string">&quot;fghij&quot;</span>]</span><br><span class="line">puts foo.length -&gt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.直接呼叫</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">  puts <span class="string">&quot;So delicious <span class="subst">#&#123;food&#125;</span>!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">eat(<span class="string">&quot;tofu&quot;</span>) -&gt; <span class="comment"># So delicious tofu!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略小括號直接呼叫</span></span><br><span class="line">eat <span class="string">&quot;tofu&quot;</span> -&gt; <span class="comment"># So delicious tofu!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.send呼叫</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">  puts <span class="string">&quot;So delicious!&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">send(<span class="symbol">:eat</span>) -&gt; <span class="comment"># So delicious!</span></span><br></pre></td></tr></table></figure><p>PS:</p><ul><li>length：可以計算長度</li><li>省略小括號：Ruby開發者希望設計者可以輕鬆靈活使用程式碼，因此設計許多小巧思在Ruby裏頭，「省略小括號」便是其中之一，讓程式碼閱讀起來更像文章。因此大家在轉換語言時要注意其他程式語言可不像Ruby這麼省略唷！</li></ul><h3 id="變數與方法"><a href="#變數與方法" class="headerlink" title="變數與方法"></a>變數與方法</h3><p>由於Ruby省略小括號的關係，使得方法看起來跟區域變數長得一樣，若同一個範圍內遇到兩者，該如何分別印出呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">eat = tofu <span class="comment"># eat變數指向tofu</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>    <span class="comment"># 定義eat 方法有vegetables</span></span><br><span class="line">  vegetables</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">put eat   -&gt; <span class="comment"># tofu</span></span><br><span class="line">put eat() -&gt; <span class="comment"># vegetables</span></span><br></pre></td></tr></table></figure><p>以上例子可以得知，兩者同時存在會以區域變數為優先，若要呼叫方法，加上<code>()</code>就可以囉！</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>更多衍伸知識，可以參考龍哥的書：為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/07-ruby-basic-3.html">方法與程式碼區塊（block）</a></li><li><a href="https://medium.com/%E9%B3%A5-crl/ruby-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-08-%E6%96%B9%E6%B3%95-method-dfe72e039c83">【Ruby 學習筆記 — 08】方法（method）</a></li><li>Ruby 使用手冊<a href="https://guides.ruby.tw/ruby/methods.html">方法 Methods</a></li></ul><blockquote><p>本文於 2020-09-18 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pR9Wf8d.jpg&quot;&gt;&lt;br&gt;&lt;a href=&quot;https://unsplash.com/photos/oAYlDfiZcJ0&quot;&gt;圖片來源點這邊&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;方法-Method&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 10 : Ruby的「物件導向程式設計-類別」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-10-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E9%A1%9E%E5%88%A5%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-10-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E9%A1%9E%E5%88%A5%E3%80%8D/</id>
    <published>2022-10-30T13:50:34.000Z</published>
    <updated>2022-10-30T13:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/Sb0Cw6K.jpg"></p><h2 id="類別與實體-class-and-instance"><a href="#類別與實體-class-and-instance" class="headerlink" title="類別與實體 class and instance"></a>類別與實體 class and instance</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br>class<br><a href="https://www.youtube.com/watch?v=sRUyL6kMavM"><img src="https://img.youtube.com/vi/sRUyL6kMavM/0.jpg" alt="Yes"></a></p><p>instance<br><a href="https://www.youtube.com/watch?v=UPuo_E-qrEI"><img src="https://img.youtube.com/vi/UPuo_E-qrEI/0.jpg" alt="Yes"></a></p><h3 id="什麼是類別呢？"><a href="#什麼是類別呢？" class="headerlink" title="什麼是類別呢？"></a>什麼是類別呢？</h3><p>這裡例舉個實際的例子讓大家明白。</p><p>首先請問大家，有沒有吃過紅龜粿呢&gt;ˇ&lt;&#x2F;！我最喜歡吃這種古早味的點心了，雖然吃下去會很胖也很常噎到，但是包蘿蔔絲的素食紅龜粿或草仔粿好好吃唷～，都會很珍惜、小心翼翼地、滿懷感激吃下去。</p><p>那麼，紅龜粿和類別有什麼關聯呢？咳咳，是這樣子的，製作紅龜粿會有個模具，稱之為「粿模」(或叫做「粿印」、「粿模」、「餅印」)，在傳統的農業社會時代，每逢年過節，家家戶戶都會使用各式各樣的「粿模」印製代表吉祥、長壽、豐收……等各種不同樣貌的紅龜粿唷！</p><p>同樣的模具，可以印製多個長得相同的紅龜粿，這就是「類別(Class<br>)」的概念，紅龜粿則是屬於該類別的物件，就稱為「實體(Instance)」。<br><img src="https://i.imgur.com/DWJkZyz.jpg"></p><h3 id="如何定義類別"><a href="#如何定義類別" class="headerlink" title="如何定義類別?"></a>如何定義類別?</h3><p>在Ruby世界中，要建置一個物件，首先要定義類別的特徵，然後建立一個實體。</p><p>使用<code>class</code>…<code>end</code>來實現這件事，並在範圍中定義類別的方法(method)<code>def</code>…<code>end</code>，對應於該類別物件的某些行為。</p><p>要注意的是：類別的命名規則，必須是「常數」，也就是首字英文字母要大寫。</p><p>範例如下：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">food</span>)</span><br><span class="line">    puts <span class="string">&quot;<span class="subst">#&#123;food&#125;</span>好吃營養又健康！&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>PS：在字串裡面使用<code>#&#123;&#125;</code>，便可以使用定義好的變數</p><h3 id="產生實體"><a href="#產生實體" class="headerlink" title="產生實體"></a>產生實體</h3><p>定義好<code>Rabbit</code>類別後，便可以產生許多相同的實體，並賦予他們不同的行為唷。</p><p>範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">melody = Rabbit.new</span><br><span class="line">rhythm = Rabbit.new</span><br><span class="line"></span><br><span class="line">melody.eat <span class="string">&quot;蔬菜&quot;</span></span><br><span class="line">-&gt; <span class="comment"># 印出來 蔬菜好吃營養又健康！</span></span><br><span class="line">ryhthm.eat <span class="string">&quot;紅蘿蔔&quot;</span></span><br><span class="line">-&gt; <span class="comment"># 印出來 紅蘿蔔好吃營養又健康！</span></span><br></pre></td></tr></table></figure><h3 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h3><p>說到類別，也會同樣講到繼承。</p><p>日常生活中的物件類別都會分有階層，如我們所熟悉的生物分類法：界、門、綱、目、科、屬、種。</p><p>兔子哺乳類，而哺乳類都屬於動物。由這樣的概念推導，我們將共同特徵分在同一類，較小的類別會繼承 (inherit) 具有所屬較大類別的特徵。如果所有哺乳類都會吃東西，那麼所有兔子也會吃東西。</p><p><img src="https://i.imgur.com/SUxEU6T.png"></p><p>範例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">eat</span></span><br><span class="line">    puts <span class="string">&quot;食物好吃！&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">speak</span></span><br><span class="line">    puts <span class="string">&quot;我愛你&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">melody = Rabbit.new</span><br><span class="line">melody.eat</span><br><span class="line">-&gt; <span class="comment"># 印出來 食物好吃</span></span><br><span class="line">melody.speak</span><br><span class="line">-&gt; <span class="comment"># 印出來 我愛你</span></span><br></pre></td></tr></table></figure><p>new出來的melody繼承Animal，因此同時具有eat、speak的方法唷！</p><h3 id="實體變數（instance-variable）"><a href="#實體變數（instance-variable）" class="headerlink" title="實體變數（instance variable）"></a>實體變數（instance variable）</h3><p>在實務上，在設計Rails專案時，最常使用的是「實體變數(instance variable)」。</p><p>實體變數的寫法為在變數前面加一個<code>@</code>，顧名思義，是活在每個實體裡的變數，而且每個實體之間互不相影響。</p><p>在Rails專案中，可以串連Controller與View之間的關聯唷。</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>更多衍伸知識，可以參考龍哥的書：為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/08-ruby-basic-4.html">類別（Class）與模組（Module）</a></li><li>Ruby 使用手冊<a href="https://guides.ruby.tw/ruby/classes.html">類別 Classes</a></li></ul><blockquote><p>本文於 2020-09-17 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Sb0Cw6K.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;類別與實體-class-and-instance&quot;&gt;&lt;a href=&quot;#類別與實體-class-and-instance&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 9 : Ruby的「物件導向程式設計-物件」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-9-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E7%89%A9%E4%BB%B6%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-9-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E7%89%A9%E4%BB%B6%E3%80%8D/</id>
    <published>2022-10-30T13:49:09.000Z</published>
    <updated>2022-10-30T13:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200916/20129424ZbtzRLuObi.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200916/20129424ZbtzRLuObi.jpg"></p><h2 id="物件-Object"><a href="#物件-Object" class="headerlink" title="物件 Object"></a>物件 Object</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=6S6T8GPio8Q"><img src="https://img.youtube.com/vi/6S6T8GPio8Q/0.jpg" alt="Yes"></a></p><h3 id="什麼是物件呢？"><a href="#什麼是物件呢？" class="headerlink" title="什麼是物件呢？"></a>什麼是物件呢？</h3><p>先來了解公式：</p><blockquote><p>物件 Object &#x3D; 狀態 State（名詞）+ 行為 Behavior（動詞）</p></blockquote><p>「物件」存在我們生活四周，如有形的：小木屋、千年巨木、黑色的碗盤，或無形的：銷售數據、工作考績……等。</p><p>無論哪種物件都可以用：「狀態」+「行為」，兩種事物來描述，例如：千年巨木的枝幹、樹葉是狀態的描述，生長、凋落是行為的描述。</p><p>物件導向程式設計使程式碼擬人化，讓設計者更加容易使用。</p><h3 id="Ruby世界"><a href="#Ruby世界" class="headerlink" title="Ruby世界"></a>Ruby世界</h3><p>為了讓大家更容易學習程式設計，許多程式語言都有引進物件導向的概念，讓程式架構更容易組織、整理。而 Ruby 又是一款物件化相當徹底的程式語言，在 Ruby 的世界，你看得到的東西幾乎都是物件，數字 1、字串 “hello”，陣列、Hash 都是物件唷。</p><h3 id="為什麼是「幾乎」而不是全部呢？"><a href="#為什麼是「幾乎」而不是全部呢？" class="headerlink" title="為什麼是「幾乎」而不是全部呢？"></a>為什麼是「幾乎」而不是全部呢？</h3><p>例如：程式碼區塊(Block)就不是物件，會在之後的章節跟大家介紹唷！</p><p>謝謝觀看！</p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/08-ruby-basic-4.html">類別（Class）與模組（Module）</a></li><li><a href="http://www.gotop.com.tw/epaper/e0715/AEL004300%E5%85%A7%E5%AE%B9%E8%A9%A6%E9%96%B1.pdf">物件導向程式設計</a></li></ul><blockquote><p>本文於 2020-09-16 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200916/20129424ZbtzRLuObi.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 8 : Ruby的「物件導向程式設計」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-8-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-8-Ruby%E7%9A%84%E3%80%8C%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E3%80%8D/</id>
    <published>2022-10-30T13:47:29.000Z</published>
    <updated>2022-10-30T13:47:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200915/20129424rMrqcwYLHW.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200915/20129424rMrqcwYLHW.jpg"><br>Ruby是物件導向程式語言，這是比較難懂的觀念，對新手而言更是。這篇會盡量將自己理解的內容寫出來。</p><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=1OMAaTtfPkQ"><img src="https://img.youtube.com/vi/1OMAaTtfPkQ/0.jpg" alt="Yes"></a></p><h3 id="什麼是物件導向程式設計"><a href="#什麼是物件導向程式設計" class="headerlink" title="什麼是物件導向程式設計"></a>什麼是物件導向程式設計</h3><p>物件導向程式設計 Object-Oriented Programming (縮寫：OOP）</p><p><strong>＊先來看看維基百科怎麼說～</strong></p><blockquote><p>是種具有物件概念的程式程式設計典範，同時也是一種程式開發的抽象方針。它可能包含資料、屬性、程式碼與方法。物件則指的是類別的實例。它將物件作為程式的基本單元，將程式和資料封裝其中，以提高軟體的重用性、靈活性和擴充性，物件裡的程式可以存取及經常修改物件相關連的資料。</p></blockquote><p>好的，其實看完維基百科的解釋還是不太懂（笑）。</p><p>物件導向的由來可以說是程式設計的衍化，由最早的非結構化程式設計到現在的<strong>物件導向程式設計</strong>，其間經過結構化程式設計(Structured Programming)和模組化程式設計(Modular Programming)。<br><img src="https://i.imgur.com/5cXfsXh.png"></p><p>傳統的程式設計主張將程式看作一系列函式的集合，直接一系列對電腦下達指令。而物件導向程式設計中的每一個物件都應該能夠「接受資料、處理資料」並將資料傳達給其它物件。以方便設計者更快速、容易使用程式碼。</p><p>其基本理論有：類別、方法、物件。<br>會在之後的章節詳細介紹唷！</p><h3 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1. 請試著用自己的方式闡述一遍何謂「物件導向程式設計」。</span><br></pre></td></tr></table></figure><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><ul><li>為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/08-ruby-basic-4.html">類別（Class）與模組（Module）</a></li><li><a href="http://www.gotop.com.tw/epaper/e0715/AEL004300%E5%85%A7%E5%AE%B9%E8%A9%A6%E9%96%B1.pdf">物件導向程式設計</a></li></ul><blockquote><p>本文於 2020-09-15 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200915/20129424rMrqcwYLHW.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 7 : Ruby中的「Hash」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-7-Ruby%E4%B8%AD%E7%9A%84%E3%80%8CHash%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-7-Ruby%E4%B8%AD%E7%9A%84%E3%80%8CHash%E3%80%8D/</id>
    <published>2022-10-30T13:45:49.000Z</published>
    <updated>2022-10-30T13:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200914/20129424BKqGzGi7pf.png" alt="https://ithelp.ithome.com.tw/upload/images/20200914/20129424BKqGzGi7pf.png"></p><h2 id="雜湊-Hash"><a href="#雜湊-Hash" class="headerlink" title="雜湊 Hash"></a>雜湊 Hash</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=bvEdZs6h-98"><img src="https://img.youtube.com/vi/bvEdZs6h-98/0.jpg" alt="Yes"></a></p><h3 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p>Hash是由Key、Value所組成的資料，設計者只要根據Key值就可以取得相對應的資料唷！<br>雖然中文翻譯很奇怪，不過大家都是這麼稱呼的，實務上使用都是講hash。</p><h3 id="如何建立hash？"><a href="#如何建立hash？" class="headerlink" title="如何建立hash？"></a>如何建立hash？</h3><ol><li>使用hash類別，new一個給他。<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vegan = Hash.new</span><br></pre></td></tr></table></figure></li><li>使用大括號<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vegan = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># EX:</span></span><br><span class="line">vegan = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Lisa&#x27;</span>, <span class="symbol">age:</span><span class="number">8</span> &#125;</span><br><span class="line">p vegan -&gt; &#123; <span class="symbol">:name</span> =&gt; <span class="string">&quot;Lisa&quot;</span>, <span class="symbol">:age</span> =&gt; <span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="ruby的hash有多種寫法？"><a href="#ruby的hash有多種寫法？" class="headerlink" title="ruby的hash有多種寫法？"></a>ruby的hash有多種寫法？</h3><ul><li><p>舊式：箭頭式。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字串寫法</span></span><br><span class="line">vegan = &#123; <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&quot;Lisa&quot;</span>, <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">8</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符號寫法</span></span><br><span class="line">vegan = &#123; <span class="symbol">:name</span> =&gt; <span class="string">&quot;Lisa&quot;</span>, <span class="symbol">:age</span> =&gt; <span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure><p>但之前的章節說過使用「字串」的效能沒有「符號」好，所以這邊使用「<strong>符號</strong>」為主。</p></li><li><p>新式：Ruby 1.9版本之後的新式寫法，設計為現代、較類似JSON風格的寫法，給設計者方便的一種寫法。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vegan = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Lisa&#x27;</span>, <span class="symbol">age:</span><span class="number">8</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>＊該選擇哪一個版本的寫法呢？</strong><br>Ans：事實上使用舊式或新式寫法都可以，文件格式統一即可。</p><h3 id="如何取出key或value的值？"><a href="#如何取出key或value的值？" class="headerlink" title="如何取出key或value的值？"></a>如何取出key或value的值？</h3><p>因為hash是key跟value的組合，所以可以單獨使用方法來印出。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p vegan.keys <span class="comment"># 印出 [:name, :age]</span></span><br><span class="line">p vegan.values <span class="comment"># 印出 [&quot;Lisa&quot;, 8]</span></span><br></pre></td></tr></table></figure><p>印出來的是舊式的寫法，因為本質上是舊式的。</p><p><strong>＊索引號碼</strong><br>若是之前學過別的程式語言會不習慣ruby的方式，在ruby要用對的key才能拿到value。</p><p>例如想要拿到kk</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p vegan[<span class="string">&quot;name&quot;</span>] <span class="comment"># 別的程式語言，印出 nil</span></span><br><span class="line">p vegan[<span class="symbol">:name</span>] <span class="comment"># Ruby 印出 &quot;Lisa&quot;</span></span><br></pre></td></tr></table></figure><h3 id="修改key的值怎麼做"><a href="#修改key的值怎麼做" class="headerlink" title="修改key的值怎麼做"></a>修改key的值怎麼做</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vegan = &#123; <span class="symbol">name:</span> <span class="string">&#x27;Lisa&#x27;</span>, <span class="symbol">age:</span><span class="number">8</span> &#125;</span><br><span class="line">vegan[<span class="symbol">:name</span>] = <span class="string">&#x27;Jon&#x27;</span></span><br><span class="line">p vegan <span class="comment"># 印出來 &#123; name:&#x27;Jon&#x27;, age:8&#125;</span></span><br></pre></td></tr></table></figure><h3 id="使用each，將資料一個個印出來。"><a href="#使用each，將資料一個個印出來。" class="headerlink" title="使用each，將資料一個個印出來。"></a>使用each，將資料一個個印出來。</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vegan.each <span class="keyword">do</span> |<span class="params">element</span>|</span><br><span class="line">  p vegan</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>多一個變數的寫法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vegan.each <span class="keyword">do</span> |<span class="params">key, value</span>|</span><br><span class="line">  puts key</span><br><span class="line">  puts value</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>更多的使用方法依樣可以參考手冊唷！<br><a href="https://ruby-doc.org/core/Hash.html">Hash 官方手冊</a></p><hr><h2 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h2><p>請依<a href="https://ruby-doc.org/core/Hash.html">官方手冊</a>回答以下題目：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hash_one = &#123; <span class="symbol">a:</span><span class="number">37</span> , <span class="symbol">b:</span><span class="number">42</span> &#125;</span><br><span class="line">hash_two = &#123; <span class="symbol">a:</span><span class="number">55</span> , <span class="symbol">c:</span><span class="number">77</span> &#125;</span><br><span class="line">hash_three = &#123; <span class="symbol">a:</span><span class="number">66</span> , <span class="symbol">d:</span><span class="number">89</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 請印出以下結果。</span><br><span class="line">a is <span class="number">37</span></span><br><span class="line">b is <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 請印出以下結果。</span><br><span class="line">&#123; <span class="symbol">a:</span><span class="number">55</span>, <span class="symbol">b:</span><span class="number">42</span>, <span class="symbol">c:</span><span class="number">77</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 請印出以下結果</span><br><span class="line">&#123; <span class="symbol">a:</span><span class="number">37</span>, <span class="symbol">b:</span><span class="number">42</span>, <span class="symbol">c:</span><span class="number">77</span>, <span class="symbol">d:</span><span class="number">89</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="參考答案"><a href="#參考答案" class="headerlink" title="參考答案"></a>參考答案</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. hash.each <span class="keyword">do</span> &#123; |<span class="params">key, value</span>| puts <span class="string">&quot;<span class="subst">#&#123;key&#125;</span> is <span class="subst">#&#123;value&#125;</span>&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. hash_one.merge!(hash_two)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. hash_one.merge!(hash_two,hash_three)&#123; |<span class="params">key, v1, v2</span>| v1 &#125;</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/06-ruby-basic-2.html#range_class">數字、字串、陣列、範圍、雜湊、符號</a></li></ul><blockquote><p>本文於 2020-09-14 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200914/20129424BKqGzGi7pf.png&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 6 : Ruby中的「陣列、範圍」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-6-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E9%99%A3%E5%88%97%E3%80%81%E7%AF%84%E5%9C%8D%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-6-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E9%99%A3%E5%88%97%E3%80%81%E7%AF%84%E5%9C%8D%E3%80%8D/</id>
    <published>2022-10-30T13:43:00.000Z</published>
    <updated>2022-10-30T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200913/20129424nDeeWcyg0a.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200913/20129424nDeeWcyg0a.jpg"></p><h2 id="陣列-Array"><a href="#陣列-Array" class="headerlink" title="陣列 Array"></a>陣列 Array</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=NymaYMYVH_A"><img src="https://img.youtube.com/vi/NymaYMYVH_A/0.jpg" alt="Yes"></a></p><h3 id="何謂陣列？"><a href="#何謂陣列？" class="headerlink" title="何謂陣列？"></a>何謂陣列？</h3><p>陣列<code>[]</code>：是一組相同型態的連續變數，它們使用同一個變數名稱，而另外用一個索引值來指定使用第幾個變數。在方括號<code>[]</code>裡放進同類型的元素，而在Ruby世界的陣列能夠容納各種型別的物件。</p><h3 id="如何建立陣列？"><a href="#如何建立陣列？" class="headerlink" title="如何建立陣列？"></a>如何建立陣列？</h3><ol><li><p>new 一個陣列的類別</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = Array.new</span><br></pre></td></tr></table></figure></li><li><p>直接指向方括號，為常用的寫法，並使用逗號區別元素。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y = []</span><br><span class="line"></span><br><span class="line">Array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">&quot;aa&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>使用<code>%w</code>，會建立字串的陣列</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Array = <span class="string">%w(aa bb nn)</span></span><br><span class="line"></span><br><span class="line">p Array</span><br><span class="line">-&gt; <span class="comment"># 印出 [&quot;aa&quot;, &quot;bb&quot;, &quot;nn&quot;]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="索引號碼-index-number"><a href="#索引號碼-index-number" class="headerlink" title="索引號碼 (index number)"></a>索引號碼 (index number)</h3><p>使用索引號碼可以指向陣列的任何部分，位置從0開始計算，使用方法如下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">food = [<span class="string">&#x27;豆腐&#x27;</span>, <span class="string">&#x27;素漢堡&#x27;</span>, <span class="string">&#x27;素pizza&#x27;</span>, <span class="string">&#x27;素手捲&#x27;</span>, <span class="string">&#x27;素糕&#x27;</span>, <span class="string">&#x27;薯條&#x27;</span>]</span><br><span class="line"></span><br><span class="line">puts food[<span class="number">0</span>] -&gt; <span class="comment"># 印出 豆腐</span></span><br><span class="line">puts food[<span class="number">1</span>] -&gt; <span class="comment"># 印出 素漢堡</span></span><br><span class="line">puts food[-<span class="number">1</span>] -&gt; <span class="comment"># 印出 薯條</span></span><br><span class="line">puts food[-<span class="number">2</span>] -&gt; <span class="comment"># 印出 素糕</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或是使用ruby的內建方法</span></span><br><span class="line">puts food.first -&gt; <span class="comment"># 印出 豆腐</span></span><br><span class="line">puts food.last -&gt; <span class="comment"># 印出 薯條</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 計算陣列內元素個數</span></span><br><span class="line">puts food.length -&gt; <span class="comment"># 印出 6</span></span><br><span class="line">food &lt;&lt; <span class="string">&#x27;堅果奶茶&#x27;</span> -&gt; <span class="comment">#在陣列的最後面加一個人</span></span><br><span class="line">puts food.length -&gt; <span class="comment"># 印出  7</span></span><br><span class="line">food.push(<span class="string">&#x27;燕麥奶茶&#x27;</span>) -&gt; <span class="comment"># 正規的方法</span></span><br><span class="line">puts food.length -&gt; <span class="comment"># 印出 8</span></span><br></pre></td></tr></table></figure><h3 id="Ruby內建關於陣列的方法"><a href="#Ruby內建關於陣列的方法" class="headerlink" title="Ruby內建關於陣列的方法"></a>Ruby內建關於陣列的方法</h3><p>有了陣列之後，我們可以利用陣列做邏輯運算，而Ruby內建也建立許多快速好用的方法，方便使用者。而要獲得這些方法，則是需要好好閱讀文件，熟悉用法，以協助更熟練使用Ruby語言唷！（<a href="https://ruby-doc.org/core/Array.html">Ruby Array 手冊</a>）</p><p>以下介紹會介紹幾個常用的方法。</p><h4 id="map方法"><a href="#map方法" class="headerlink" title="map方法"></a>map方法</h4><p><strong>＊定義</strong><br>對Array裡的每個元素「<strong>進行計算</strong>」，並收集成一個新的Array。<br>同義詞：collect</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125;裡寫下條件，以下範例為：讓陣列裡每個元素都乘以兩倍。</span></span><br><span class="line">p Array.map &#123;|<span class="params">x</span>| x * <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用同義詞collect也可以達到同樣的效果。</span></span><br><span class="line">p Array.collect &#123;|<span class="params">x</span>| x * <span class="number">2</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下範例的運算為變成「平方」。</span></span><br><span class="line">p Array.map &#123;|<span class="params">x</span>| x * x &#125;</span><br></pre></td></tr></table></figure><h4 id="select方法"><a href="#select方法" class="headerlink" title="select方法"></a>select方法</h4><p><strong>＊定義</strong><br>從集合裡「<strong>篩選符合條件</strong>」的元素，並收集成一個新的集合。<br>同義詞：filter<br>反義詞：reject</p><p>以下使用到的<code>(1..10)</code>為範圍，展開後為<code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 將條件寫在&#123;&#125;裡，以下範例為：篩選小於5的數字。</span></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).select &#123; |<span class="params">x</span>| x &lt; <span class="number">5</span> &#125;</span><br><span class="line">-&gt; <span class="comment"># 印出來 [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用反義詞，則會篩遠出相反的數字。</span></span><br><span class="line">p (<span class="number">1</span>..<span class="number">10</span>).reject &#123; |<span class="params">x</span>| x &lt; <span class="number">5</span> &#125;</span><br><span class="line">-&gt; <span class="comment"># 印出來 [5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h4 id="reduce方法"><a href="#reduce方法" class="headerlink" title="reduce方法"></a>reduce方法</h4><p><strong>定義</strong><br>對集合裡的每個元素「<strong>進行運算</strong>」，並將所有的運算結果歸納成一個「單一結果」。<br>同義詞：inject</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sum為總和的意思，以下案例為：1+2+3...+10的數學運算</span></span><br><span class="line">p(<span class="number">1</span>..<span class="number">10</span>).reduce &#123; |<span class="params">sum, x</span>| sum + x &#125;</span><br><span class="line">-&gt; <span class="comment"># 印出來 55</span></span><br></pre></td></tr></table></figure><p>若沒有這個方法的話則需要自己寫一個迴圈，寫Ruby是不是方便很多呢！</p><hr><h2 id="範圍-Range"><a href="#範圍-Range" class="headerlink" title="範圍 Range"></a>範圍 Range</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=dI4dwSFVlaY"><img src="https://img.youtube.com/vi/dI4dwSFVlaY/0.jpg" alt="Yes"></a></p><h3 id="何謂範圍？"><a href="#何謂範圍？" class="headerlink" title="何謂範圍？"></a>何謂範圍？</h3><p>為Ruby的特點，很多程式語言沒有這樣的設計。使用<code>()</code>和<code>.</code>來縮寫想要表達一串的元素。直接看範例會比較清楚。</p><ol><li>使用兩個<code>..</code>，較常使用。<br><code>puts (1..10).to_a -&gt; # 印出 1~10</code></li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>..<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 展開範圍 1~10</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>..<span class="string">&#x27;z&#x27;</span>) <span class="comment"># 範圍 a~z</span></span><br><span class="line">(<span class="string">&#x27;A&#x27;</span>..<span class="string">&#x27;Z&#x27;</span>) <span class="comment"># 範圍 A~Z</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用三個<code>...</code>，建議不要使用，避免混淆。<br><code>puts (1...10).to_a -&gt; # 印出 1~9</code></p></li><li><p>也可以結合迴圈、條件式……等使用。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span></span><br><span class="line">  puts i</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ol><p>或是以下<code>case...when</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> age</span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span>..<span class="number">3</span></span><br><span class="line">  puts <span class="string">&quot;嬰兒&quot;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">4</span>..<span class="number">10</span></span><br><span class="line">  puts <span class="string">&quot;兒童&quot;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">11</span>..<span class="number">17</span></span><br><span class="line">  puts <span class="string">&quot;青少年&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  puts <span class="string">&quot;成年&quot;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><hr><h2 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h2><p>請參考<a href="https://ruby-doc.org/core/Array.html">Ruby Array 手冊</a>來完成以下題目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 把陣列[7, 8, 9]塞入三組同樣的數字，如[7, 8, 9, 7, 8, 9, 7, 8, 9, 7, 8, 9]。</span><br><span class="line">2. 把陣列[1,3,4,1,7,nil,7]由小到大排序，並移除「nil」以及「重複」的數字。</span><br><span class="line">3. 印出5個小於100且不重複的亂數</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="參考解答"><a href="#參考解答" class="headerlink" title="參考解答"></a>參考解答</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. [7, 8, 9] * 4 -&gt; [7, 8, 9, 7, 8, 9, 7, 8, 9, 7, 8, 9]</span><br><span class="line">2. [1,3,4,1,7,nil,7].compact.sort.unip -&gt; [1,3,4,7]</span><br><span class="line">3. p (1..52).to_a.shuffle.first(5)</span><br><span class="line">   或使用取樣方法 p (1..100).to_a.sample(5)</span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>為你自己學 Ruby on Rails<a href="https://railsbook.tw/chapters/06-ruby-basic-2.html#range_class">數字、字串、陣列、範圍、雜湊、符號</a></li></ul><blockquote><p>本文於 2020-09-13 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200913/20129424nDeeWcyg0a.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 5 : Ruby中的「數字、符號」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-5-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E6%95%B8%E5%AD%97%E3%80%81%E7%AC%A6%E8%99%9F%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-5-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E6%95%B8%E5%AD%97%E3%80%81%E7%AC%A6%E8%99%9F%E3%80%8D/</id>
    <published>2022-10-30T13:40:28.000Z</published>
    <updated>2022-10-30T13:40:28.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200912/20129424kGV2BMklLi.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200912/20129424kGV2BMklLi.jpg"></p><h2 id="數字：整數-Integer、浮點數-Float"><a href="#數字：整數-Integer、浮點數-Float" class="headerlink" title="數字：整數 Integer、浮點數 Float"></a>數字：整數 Integer、浮點數 Float</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。</p><p>整數 Integer<br><a href="https://www.youtube.com/watch?v=DDC8rC9uQcg"><img src="https://img.youtube.com/vi/DDC8rC9uQcg/0.jpg" alt="Yes"></a></p><p>浮點數 Float<br><a href="https://www.youtube.com/watch?v=eNaXx7HUPcA"><img src="https://img.youtube.com/vi/eNaXx7HUPcA/0.jpg" alt="Yes"></a></p><h3 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p>數字型別包含：</p><ul><li>整數 Integer：可數的，EX:1,2,3,4,5……。</li><li>浮點數 Float：小數點，EX:3.33。</li></ul><h4 id="Ruby世界的數字？"><a href="#Ruby世界的數字？" class="headerlink" title="Ruby世界的數字？"></a>Ruby世界的數字？</h4><p>因為Ruby是物件導向的程式語言，大多數看到的皆是「物件」，肉眼看起來像數字外觀的數字也是物件的一種唷。</p><p><strong>△肉眼觀世間，曖昧難辨</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puts 1 + 2</span><br><span class="line">印出來 -&gt; 3</span><br></pre></td></tr></table></figure><p>以上看起來簡簡單單的加法運算，但其實加號在Ruby中只是一般的方法（method），省略了小括號。</p><p>原來的樣子應該是如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puts 1.+(2)</span><br><span class="line">印出來 -&gt; 3</span><br></pre></td></tr></table></figure><p>這個加號，事實上是「數字物件 1」呼叫了「+」這個方法，並且把「數字物件 2」當做參數傳進去。也因為他是一個方法，所以也可以重新改寫它原來的功能，讓 1 + 1 不等於 2 都是有可能的。</p><h4 id="浮點數轉整數"><a href="#浮點數轉整數" class="headerlink" title="浮點數轉整數"></a>浮點數轉整數</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">puts 3.33.round #轉成整數，四捨五入</span><br><span class="line">puts 3.33.floor #轉成整數，無條件捨去</span><br><span class="line">puts 3.33.ceil  #轉成整數，無條件進位</span><br><span class="line">puts 3.33.to_i  #小數轉整數，無條件捨去</span><br></pre></td></tr></table></figure><h4 id="型別轉換-Conversions"><a href="#型別轉換-Conversions" class="headerlink" title="型別轉換 Conversions"></a>型別轉換 Conversions</h4><p>字串可以使用以下轉型方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">to_i: 轉整數</span><br><span class="line">to_f: 轉浮點數</span><br><span class="line">to_sym: 轉符號</span><br><span class="line">to_s: 轉字串</span><br></pre></td></tr></table></figure><p>如下範例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p &quot;169.99cm&quot;.to_f   # 169.99</span><br><span class="line">p &quot;169.99cm&quot;.to_i   # 169</span><br><span class="line">p &quot;169.99cm&quot;.to_sym # :&quot;169.99cm&quot;</span><br><span class="line">p :169cm.to_s       # &quot;169cm&quot;</span><br></pre></td></tr></table></figure><h4 id="整數除法"><a href="#整數除法" class="headerlink" title="整數除法"></a>整數除法</h4><p>因為Ruby是物件導向程式語言，看過去的東西大多為物件，因此在Ruby世界裡面，整數除以整數會得到整數<code>10/3 == 3</code>。</p><p><strong>＊那要如何得到小數點？</strong></p><blockquote><p>除數或被除數其中一個改小數點即可!</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10.0/3 == 3.333333</span><br><span class="line">10/3.0 == 3.333333</span><br><span class="line">10.0/3.0 == 3.333333</span><br></pre></td></tr></table></figure><hr><h2 id="符號-Symbol"><a href="#符號-Symbol" class="headerlink" title="符號 Symbol"></a>符號 Symbol</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://youtu.be/EJg47hnavNM">https://youtu.be/EJg47hnavNM</a></p><h3 id="名詞解釋-1"><a href="#名詞解釋-1" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p>在了解符號之前，先來加深「物件」的概念。在Ruby的世界裡，看到的大多是物件，如以下：</p><ul><li><code>1000</code>：數字物件</li><li><code>&quot;World peace&quot;</code>：字串物件</li><li><code>：vegan</code>：符號物件</li></ul><p>由以上可以得知，「符號 Symbol」使用冒號<code>:</code>開頭，他類似一種無法修改的字串，我們會說他是「有名字的物件 an object with a name」。</p><p>要注意的是，「符號」不是「變數」，是值，本身不會只向任何東西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 「變數」可以指向</span><br><span class="line">say = &quot;hello world!&quot;</span><br><span class="line"></span><br><span class="line"># 「符號」不可以指向</span><br><span class="line">:say = &quot;hello world!&quot; -&gt; 會出錯！</span><br></pre></td></tr></table></figure><p><strong>＊那字串跟符號哪裡不一樣？</strong><br>字串的效能會比符號差了一點點，兩者最主要的差異在於「記憶體的管理方式」，由於 Ruby中的每個字串都是新的物件，所以即使是相同的字串也會佔用不同的記憶體，而符號則是重復利用：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&quot;string&quot;</span>.object_id <span class="comment"># 2157007700 &lt;- 不同記憶體位置</span></span><br><span class="line">puts <span class="string">&quot;string&quot;</span>.object_id <span class="comment"># 2157007540</span></span><br><span class="line">puts <span class="symbol">:symbol</span>.object_id  <span class="comment"># 391528 &lt;- 相同的記憶體位置</span></span><br><span class="line">puts <span class="symbol">:symbol</span>.object_id  <span class="comment"># 391528</span></span><br></pre></td></tr></table></figure><p><strong>＊不可變(immutable)的特性？</strong><br>符號具有不可變的特性，字串可以改變值，符號不行。<br>可由以下例子得知：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;abcde&quot;</span></span><br><span class="line">name[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line">p name -&gt; <span class="string">&quot;abc4e&quot;</span></span><br><span class="line"></span><br><span class="line">name = <span class="symbol">:abcde</span></span><br><span class="line">name[<span class="number">3</span>] = <span class="number">4</span></span><br><span class="line">p name -&gt; undefined method <span class="string">`[]=&#x27; for :abcde:Symbol (NoMethodError)</span></span><br></pre></td></tr></table></figure><p><strong>＊符號的功用是什麼呢？</strong><br>因為以上的特性，讓符號在Ruby中主要用作hash的鍵(key)或者是用來指稱方法的名稱。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash = &#123;<span class="symbol">:key</span> =&gt; <span class="string">&quot;12345&quot;</span>, <span class="symbol">:symbol</span> =&gt; <span class="string">&quot;string&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="總整理"><a href="#總整理" class="headerlink" title="總整理"></a>總整理</h3><blockquote><ol><li>immutable：被建立後就不能改變。</li><li>任何「符號」都指稱到同一個記憶體位置，因此較省記憶體。</li><li>以「符號」當作鍵(key)的效能會比「字串」當作鍵的效能來得好。</li></ol></blockquote><hr><h2 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h2><p>請回答以下問題：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.請問符號是什麼？跟變數一樣嗎？</span><br><span class="line">2.字串嵌入 String interpolation是什麼？如何實作？</span><br><span class="line">3.請寫出以下p後會印出什麼？</span><br><span class="line">  p 3.30393.floor</span><br><span class="line">  p 1.33.to_i</span><br><span class="line">  p :hello.to_s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>更多的衍伸用法，可以參考龍哥的書《為你自己學 Ruby on Rails》：<a href="https://railsbook.tw/chapters/06-ruby-basic-2.html#string_class">數字、字串、陣列、範圍、雜湊、符號</a></li><li>小殘的程式光廊：<a href="https://emn178.pixnet.net/blog/post/110896195">Ruby教學 - 符號(Symbol)</a></li><li>PJCHENder 未整理筆記<a href="https://pjchender.github.io/2017/09/26/ruby-symbol%EF%BC%88%E7%AC%A6%E8%99%9F%EF%BC%89/">Symbol（符號）</a></li></ul><blockquote><p>本文於 2020-09-12 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200912/20129424kGV2BMklLi.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 4 : Ruby中的「資料型別、字串」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-4-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5%E3%80%81%E5%AD%97%E4%B8%B2%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-4-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5%E3%80%81%E5%AD%97%E4%B8%B2%E3%80%8D/</id>
    <published>2022-10-30T13:37:10.000Z</published>
    <updated>2022-10-30T13:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200911/201294246vWHhqjTUl.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200911/201294246vWHhqjTUl.jpg"></p><h2 id="資料型別-Data-Type"><a href="#資料型別-Data-Type" class="headerlink" title="資料型別 Data Type"></a>資料型別 Data Type</h2><p>在了解接下來的單元前，先簡單知道Ruby世界的資料型別。</p><p><strong>＊普羅大眾的「資料型別」？</strong><br>電腦的功能就是處理無數的資料，資料是儲存在記憶體的儲存區，由於資料的型態各不相同，在儲存時所需要的容量不一，不同的資料必須要配給不同的空間大小來儲存，因而有了資料型態（Data type）的規範。</p><blockquote><p>只要是資料都有型別。</p></blockquote><p><strong>＊Ruby世界的資料型別</strong><br>由於Ruby是個完全物件導向的語言，從下圖可以看到物件的階層關係，所有型別皆繼承自物件(Object)，甚至是模組(Module)和類別(Class)。</p><blockquote><p>所有的型別都是物件。</p></blockquote><p><img src="https://i.imgur.com/11fVmQS.png"></p><h2 id="字串-String"><a href="#字串-String" class="headerlink" title="字串 String"></a>字串 String</h2><p><strong>＊英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=61Dvw1JVxxc"><img src="https://img.youtube.com/vi/61Dvw1JVxxc/0.jpg" alt="Yes"></a></p><h3 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p><strong>＊什麼是字串？</strong><br>使用引號包起來的一段文字。</p><p><strong>＊建立方法？</strong></p><table><thead><tr><th>方法</th><th>程式解析</th><th>範例</th></tr></thead><tbody><tr><td>new方法</td><td>建立出物件</td><td><code>wish = String.new(&quot;World peace&quot;)</code></td></tr><tr><td>單引號 Single Quote</td><td>不解析內容，不做代入與翻譯</td><td><code>wish = &#39;World peace&#39;</code></td></tr><tr><td>雙引號 Double Quote</td><td>解析內容</td><td><code>wish = &quot;World peace&quot;</code></td></tr><tr><td>%q()</td><td>同單引號，Ruby特有的寫法</td><td><code>%q(World peace)</code></td></tr><tr><td>%Q()</td><td>同雙引號，Ruby特有的寫法</td><td><code>%Q(World peace)</code></td></tr></tbody></table><p><strong>＊字串可以串接！如何串接字串？</strong> -&gt; 字串嵌入 String interpolation</p><p>Ruby世界的串接方式：<br>字串中可使用#{expr}的形式插入程式碼，稱為Interpolation，通常用來填入變數，不過也可以執行程式。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="number">2</span> * <span class="number">5</span></span><br><span class="line">puts <span class="string">&quot;2 * 5 = <span class="subst">#&#123;value&#125;</span>&quot;</span> <span class="comment"># 2 * 5 = 10</span></span><br><span class="line">puts <span class="string">&quot;2 * 5 = <span class="subst">#&#123;<span class="number">2</span> * <span class="number">5</span>&#125;</span>&quot;</span> <span class="comment"># 2 * 5 = 10</span></span><br></pre></td></tr></table></figure><p>單引號和雙引號最大的差別：<br>只有使用雙引號的字串可以使用String interpolation，用法如下。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;Lisa&quot;</span></span><br><span class="line">wish = <span class="string">&quot;World peace&quot;</span></span><br><span class="line"></span><br><span class="line">puts <span class="string">&quot;I&#x27;m <span class="subst">#&#123;name&#125;</span>, I wish for <span class="subst">#&#123;wish&#125;</span>.&quot;</span></span><br><span class="line">印出來 -&gt; I<span class="string">&#x27;m Lisa, I wish for World peace.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">puts &#x27;</span>I am <span class="comment">#&#123;name&#125;, I wish for #&#123;wish&#125;.&#x27;</span></span><br><span class="line">印出來 -&gt; I am <span class="comment">#&#123;name&#125;, I wish for #&#123;wish&#125;.</span></span><br></pre></td></tr></table></figure><p><strong>＊字串當中也需要用到引號該怎麼辦？</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">puts <span class="string">&#x27;I&#x27;</span>m Lisa, I wish <span class="keyword">for</span> World peace.<span class="string">&#x27;</span></span><br><span class="line"><span class="string">印出來 -&gt; syntax error, unexpected tIDENTIFIER, expecting end-of-input</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">會出現語法錯誤。</span></span><br></pre></td></tr></table></figure><p>解法一：改用雙引號<code>&quot; &quot;</code>。<br>解法二：加上反斜線<code>\</code>，反斜線的後面加上非字串的單引號，讓他跳脫字元。<br>解法三：改用<code>%q()</code>，效果等同單引號。</p><hr><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li>更多的衍伸用法，可以參考龍哥的書《為你自己學 Ruby on Rails》<a href="https://railsbook.tw/chapters/06-ruby-basic-2.html#string_class">數字、字串、陣列、範圍、雜湊、符號</a></li><li>小殘的程式光廊：<a href="https://emn178.pixnet.net/blog/post/110782417">Ruby教學 - 字串(String)</a></li></ul><h2 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h2><p>請回答以下題目：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.請解釋字串使用雙引號、單引號，有何不同？</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.以下程式碼出錯了，請改寫他。</span><br><span class="line">puts <span class="string">&quot;我喜歡&quot;</span>為你自己學Ruby on Rails<span class="string">&quot;這本書，深入淺出，真是初學者的最佳入手書！&quot;</span></span><br><span class="line">印出來 -&gt; syntax error, unexpected tIDENTIFIER, expecting <span class="keyword">end</span>-of-input</span><br></pre></td></tr></table></figure><blockquote><p>本文於 2020-09-11 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200911/201294246vWHhqjTUl.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】Ruby名詞解釋總匯 - Day 3: Ruby中的「常數、關鍵字與保留字」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-3-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E5%B8%B8%E6%95%B8%E3%80%81%E9%97%9C%E9%8D%B5%E5%AD%97%E8%88%87%E4%BF%9D%E7%95%99%E5%AD%97%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-3-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E5%B8%B8%E6%95%B8%E3%80%81%E9%97%9C%E9%8D%B5%E5%AD%97%E8%88%87%E4%BF%9D%E7%95%99%E5%AD%97%E3%80%8D/</id>
    <published>2022-10-30T13:34:43.000Z</published>
    <updated>2022-10-30T13:34:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200910/20129424seKKaSMY1i.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200910/20129424seKKaSMY1i.jpg"></p><hr><h2 id="常數-Constant"><a href="#常數-Constant" class="headerlink" title="常數 Constant"></a>常數 Constant</h2><p><strong>英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=wX97gXBFcwk"><img src="https://img.youtube.com/vi/wX97gXBFcwk/0.jpg" alt="Yes"></a></p><h3 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p><strong>什麼是常數？</strong></p><p>與變數相反，變數可以改變，但常數不變！</p><p>我們在宣告變數後，變數內存的資料有可能因程式的運算或指令而改變其資料內容。若確定內存的資料，在執行過程中其內容均不改變，可使用常數來裝存該資料。</p><p><strong>Ruby世界的常數有什麼不一樣？</strong></p><ol><li>要「大寫英文字母」為開頭的命名！Ruby才有的規則。EX: <code>Apple</code>, <code>Banana</code>……。</li><li>原則上在整個程式執行過程中，電腦只會去讀取常數的資料，而不會修改資料。但是，在ruby的世界，常數是可以被修改的，會被警告，但不會出錯。</li></ol><p>這是Ruby語言給工程師的方便性，其他程式語言不可以唷！</p><hr><h2 id="關鍵字與保留字-keyword-and-reserved-word"><a href="#關鍵字與保留字-keyword-and-reserved-word" class="headerlink" title="關鍵字與保留字 keyword and reserved word"></a>關鍵字與保留字 keyword and reserved word</h2><p><strong>英文發音</strong><br>首先來聽聽英文發音～。</p><p>keyword<br><a href="https://www.youtube.com/watch?v=Mkz8AmGXwTA"><img src="https://img.youtube.com/vi/Mkz8AmGXwTA/0.jpg" alt="Yes"></a></p><p>reserved<br><a href="https://www.youtube.com/watch?v=hkIKnJpO4qI"><img src="https://img.youtube.com/vi/hkIKnJpO4qI/0.jpg" alt="Yes"></a></p><h3 id="名詞解釋-1"><a href="#名詞解釋-1" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><p><strong>什麼是關鍵字&#x2F;保留字？</strong></p><p>為程式語言理事先定義好並賦予了特殊含義的內建語法單詞，使用者不能再將這些字作為變數名或過程名使用。</p><p>通常，關鍵字&#x2F;保留字可以用來辨識如：迴圈結構、語句塊、條件、分支等程式結構。</p><p>以Ruby為例：</p><ul><li>條件判斷式：<code>if</code> <code>else</code></li><li>類別宣告：<code>class</code></li><li>函式宣告：<code>def</code> <code>end</code></li><li>for循環：<code>for</code></li><li>while迴圈：<code>while</code><br>……等，當變數命名時，切勿重複到。</li></ul><hr><h3 id="回家作業"><a href="#回家作業" class="headerlink" title="回家作業"></a>回家作業</h3><p>請回答下列題目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 變數和常數有什麼不一樣？</span><br><span class="line">2. Ruby世界的常數和其他程式語言的常數有哪裡不同？</span><br><span class="line">3. 為什麼變數命名時不能衝撞關鍵字/保留字？</span><br></pre></td></tr></table></figure><blockquote><p>本文於 2020-09-10 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200910/20129424seKKaSMY1i.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】 Ruby名詞解釋總匯 - Day 2 : Ruby中的「變數」</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91-Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-2-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E8%AE%8A%E6%95%B8%E3%80%8D/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91-Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-2-Ruby%E4%B8%AD%E7%9A%84%E3%80%8C%E8%AE%8A%E6%95%B8%E3%80%8D/</id>
    <published>2022-10-30T13:17:57.000Z</published>
    <updated>2022-10-30T13:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200909/20129424y4eAPB4EPi.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200909/20129424y4eAPB4EPi.jpg"></p><h2 id="變數-Variable"><a href="#變數-Variable" class="headerlink" title="變數 Variable"></a>變數 Variable</h2><p><strong>英文發音</strong><br>首先來聽聽英文發音～。<br><a href="https://www.youtube.com/watch?v=LBzcBWqRjgM"><img src="https://img.youtube.com/vi/LBzcBWqRjgM/0.jpg" alt="Yes"></a></p><h3 id="＊名詞解釋"><a href="#＊名詞解釋" class="headerlink" title="＊名詞解釋"></a>＊名詞解釋</h3><p><strong>什麼是變數？</strong><br>對電腦而言，<font color=#0000FF>變數</font>就是我們在撰寫程式的過程中，需要將資料紀錄到記憶體的某個位置（這個資料可能是文字、數字……等），因此我們給這個位置一個名稱，這就是<font color=#0000FF>變數</font><br>簡言之，<font color=#0000FF>變數</font>的功用就是用來存放資料的！</p><p>用生活化的方式來比擬：<br>我們要整理房間，房間有一堆玩具、衣服、文具等（一堆資料）。<br>拿出箱子收納這堆物品，裝入玩具的命名為玩具箱、裝入衣服的命名為衣服箱<br>裝入文具的命名為文具箱，這一個個被命名的箱子就是「<font color=#0000FF>變數</font>」的概念唷！</p><p>整理：把資料放到<font color=#0000FF>變數</font>裡 -&gt; 把玩具放到箱子裡。</p><p><strong>為什麼要使用變數？</strong><br>因為我們將該資料命名了，<font color=#0000FF>變數</font>可以代替這筆資料，系統就會去找該<font color=#0000FF>變數</font>裝了什麼資料，並且執行他唷。</p><p><strong>但什麼是資料呢？</strong><br>這就要說到，<font color=#0000FF>變數</font>本身沒有型態，看他裝的資料是何種型別來判定的。</p><p>資料的型別如下：</p><ul><li>字串(String)：在單&#x2F;雙引號內塞文字 -&gt; “world peace”。</li><li>符號(Symbol)：類似一種無法修改的字串，使用冒號(:)開頭 -&gt; :world_peace</li><li>數字(Numeric)<ul><li>整數(Integer)：一般平常使用的數字 -&gt; 1,2,3,4,5……</li><li>浮點數(Float)：小數點！-&gt; 3.333</li></ul></li><li>陣列(Array)：同類型的元素組成的資料結構，使用方括號([]) -&gt; [2,4,6]</li><li>雜湊(Hash)：在花括號裡面({})安排key跟value的配對組合。</li><li>範圍(Range)：在Ruby中有兩個(..)點和三個點(…)的寫法，用法如下：<ul><li>(1..5)      -&gt; 1, 2, 3, 4, 5</li><li>(1…5)     -&gt; 1, 2, 3, 4</li><li>(‘a’..’d’)  -&gt; ‘a’, ‘b’, ‘c’, ‘d’</li></ul></li><li>Nil：代表空的，還不存在的。</li><li>布林值(Boolean)：真的與假的、是的與否的。<ul><li>True</li><li>False</li></ul></li></ul><h3 id="＊使用方式"><a href="#＊使用方式" class="headerlink" title="＊使用方式"></a>＊使用方式</h3><p><strong>宣告變數？</strong><br>使用<font color=#0000FF>變數</font>前需要先宣告這個變數的資料型態為何，以便在主記憶體中保留足夠的空間來存放這些資料。</p><p>在ruby當中的宣告方式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">變數 指定 資料</span><br><span class="line">EX: x = 11</span><br></pre></td></tr></table></figure><p>上面看到的平行的兩條線<code>=</code>並不是單純的數學運算等號，而是<code>指定</code>的意思。把等號右方的資料，放進左方的變數，所以x裡面就會裝進15。</p><p><strong>系統如何閱讀程式碼？</strong><br>如同我們讀英文一樣，由上到下、由左到右，他是一行一行去執行的，因此要注意前後文的語意，以利新手時期更容易閱讀程式碼。</p><p>而程式中的運算，泛指對資料做的運作，並非單純的計算。透過以下模擬題來了解：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">11</span></span><br><span class="line">puts x -&gt; <span class="number">11</span></span><br><span class="line">x = <span class="string">&quot;world peace&quot;</span></span><br><span class="line">puts x -&gt; world peace</span><br></pre></td></tr></table></figure><p>我們可以這樣解讀程式碼：</p><ol><li>當程式碼執行到第一行時，系統多了一個箱子，這個箱子的名稱叫做x。</li><li>變數(箱子)一開始是空的，可以把資料放到變數裡面 <code>x = 11</code>。</li><li>看到等號的時候要注意，先看＝的右邊裝什麼資料，才知道如何使用變數。</li><li>在使用<code>puts</code>印出<code>x</code>，得到<code>11</code>。</li></ol><p>**注意!!**：一個變數只能裝一筆資料，因此裝新的資料進去後，舊的資料就會覆蓋掉。<br>在我們來到第三行程式碼時，<code>x</code>已經變成<code>&quot;world peace&quot;</code>了，所以印出來後會是<code>world peace</code>而非<code>11</code>，因為已經被取代掉了。</p><p><strong>變數的種類？</strong><br>樣式：區域變數、＄全域變數、＠實體變數、@@類別變數</p><p><strong>縮寫小劇場</strong><br>程式碼有許多簡化寫法，而以下是變數運算的簡化方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a+2 等同於 -&gt; a + =2</span><br></pre></td></tr></table></figure><hr><h3 id="＊參考資料"><a href="#＊參考資料" class="headerlink" title="＊參考資料"></a>＊參考資料</h3><ul><li>龍哥的書《為你自己學 Ruby on Rails》：<a href="https://railsbook.tw/">連結點此</a></li><li>小殘的程式光廊：<a href="https://emn178.pixnet.net/blog">連結點此</a></li><li>變數的使用：<a href="http://dhcp.tcgs.tc.edu.tw/c/p003.htm">連結點此</a></li></ul><h3 id="＊回家作業"><a href="#＊回家作業" class="headerlink" title="＊回家作業"></a>＊回家作業</h3><p>請依本章節所學來解題，請問y印出來會是多少呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">11</span></span><br><span class="line">y = <span class="number">27</span></span><br><span class="line"></span><br><span class="line">x = x * <span class="number">2</span></span><br><span class="line">y = y - x</span><br><span class="line"></span><br><span class="line">puts y -&gt;?</span><br></pre></td></tr></table></figure><blockquote><p>本文於 2020-09-09 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200909/20129424y4eAPB4EPi.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>【2020 12th鐵人賽】 Ruby名詞解釋總匯 - Day 1 : 萬事起頭難</title>
    <link href="https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91-Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-1-%E8%90%AC%E4%BA%8B%E8%B5%B7%E9%A0%AD%E9%9B%A3/"/>
    <id>https://chiayinin.com/2022/10/30/%E3%80%902020-12th%E9%90%B5%E4%BA%BA%E8%B3%BD%E3%80%91-Ruby%E5%90%8D%E8%A9%9E%E8%A7%A3%E9%87%8B%E7%B8%BD%E5%8C%AF-Day-1-%E8%90%AC%E4%BA%8B%E8%B5%B7%E9%A0%AD%E9%9B%A3/</id>
    <published>2022-10-30T13:13:57.000Z</published>
    <updated>2022-10-30T13:13:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ithelp.ithome.com.tw/upload/images/20200908/20129424rxIRRDjHKw.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20200908/20129424rxIRRDjHKw.jpg"><br><strong>源起</strong><br>「你為什麼要學習程式語言？」</p><p>近年來網際網路愈來愈發達，全世界吹起了「全民學程式」的風潮，愈來愈多國家將程式教育納入國小課綱當中。</p><p>乘著這推進之風的吹拂，愈來愈愈多人紛沓而至這個行業，他們帶著不同的心緒來到此地，那是一顆愈行改變自我的決心，放下老舊的自我，奮力向前，跟著世界一起精進！</p><p>加入吧！這股潮流，和未來無可限量的你相遇——！</p><p><strong>參賽動機</strong><br>學習Ruby on Rails 不足三個月。從商科跨理工，仿若一條山谷深溝，向下探伸手不見五指之深淵，這是這麼地難、這麼陌生的領域，『我過得去嗎？』腦中聲音響起的同時，也開始切砌磚頭，一步一步、一點一滴累積，建立一座橋樑，跨越這條鴻溝到山的另一頭去。</p><p>說起鐵人賽，初步印象只是對能連續30天寫文章的前輩心感佩服，曾未想過我也會步上前人所走過的道路。而在「第 12 屆 iT 邦幫忙鐵人賽」開始宣傳之初，五倍紅寶石的老師便鼓勵同學們參加比賽：「若將所學的內容解釋給別人聽，尤其是非相關領域的人，讓他們聽懂，這才是真正的學會。」這吸引著我冀望多砌一塊磚頭，早日建好商科與程式語言間的山溝大橋！</p><p>同時同學們也紛紛表示要參賽挑戰，由此我們還組成一個團隊，互相督促彼此，一同完成30天的挑戰。相信在抵達第30天時，我們不只有程式語言上的進步，也磨練自我的意志與毅力，在30天過後，都與現在的自己，大大地不同了！</p><p><strong>展望與期許</strong><br>熱愛文學的關係，其實蠻喜歡寫下文字的。只不過過往皆是寫散文、小品文居多，對技術文章陌生地很，期望30天後，不只養成寫技術文章的習慣，也能更喜歡寫技術文章喔！</p><p>另外，私以為學習任何事情，打下基礎是很重要的。既然學習了Ruby on rails，便希望學好他，又由於英文底子不好，在學習程式語言上更加困難重重，因此選擇了「Ruby名詞解釋」這個主題，希望更加了解Ruby，對於英文也能更熟悉與打好交道！</p><hr><p>那麼，從今天起「Ruby名詞解釋總匯」30天旅行就此展開！Let’s go!</p><blockquote><p>本文於 2020-09-08 發表在舊網站。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://ithelp.ithome.com.tw/upload/images/20200908/20129424rxIRRDjHKw.jpg&quot; alt=&quot;https://ithelp.ithome.com.tw/upload/images/202</summary>
      
    
    
    
    <category term="鐵人賽" scheme="https://chiayinin.com/categories/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    
    <category term="Ruby" scheme="https://chiayinin.com/tags/Ruby/"/>
    
    <category term="12th鐵人賽" scheme="https://chiayinin.com/tags/12th%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
